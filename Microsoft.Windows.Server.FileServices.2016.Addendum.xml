<?xml version="1.0" encoding="utf-8"?><ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>Microsoft.Windows.Server.FileServices.2016.Addendum</ID>
      <Version>1.0.3.7</Version>
    </Identity>
    <Name>Microsoft Windows Server FileServices 2016 Addendum</Name>
    <References>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MSIL">
        <ID>Microsoft.SystemCenter.InstanceGroup.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MWFF">
        <ID>Microsoft.Windows.FileServices.FSRM.2016</ID>
        <Version>10.0.0.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MWFD6">
        <ID>Microsoft.Windows.FileServices.Deduplication.2016</ID>
        <Version>10.0.0.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MWFDN2">
        <ID>Microsoft.Windows.FileServer.DFSN.2016</ID>
        <Version>10.0.0.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MWFDR2">
        <ID>Microsoft.Windows.FileServer.DFSR.2016</ID>
        <Version>10.0.0.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MWFDNL">
        <ID>Microsoft.Windows.FileServer.DFSN.Library</ID>
        <Version>10.0.0.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MWFDRL">
        <ID>Microsoft.Windows.FileServer.DFSR.Library</ID>
        <Version>10.0.0.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MWS2D">
        <ID>Microsoft.Windows.Server.2016.Discovery</ID>
        <Version>10.0.0.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <EntityTypes>
      <ClassTypes>
        <ClassType ID="DFS.Watcher.Monitoring.Seed.Class" Accessibility="Public" Abstract="false" Base="Windows!Microsoft.Windows.LocalApplication" Hosted="true" Singleton="false" Extension="false" />
        <ClassType ID="DFS.FileServices.Group" Accessibility="Public" Abstract="false" Base="MSIL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />
        <ClassType ID="DFS.FileServices.Script.Group" Accessibility="Public" Abstract="false" Base="MSIL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />
      </ClassTypes>
    </EntityTypes>
    <ModuleTypes>
      <DataSourceModuleType ID="Proactive.DFS.Watcher.Monitoring.Class.Discovery.DS" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="DebugLogging" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="FilePath" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="DebugLogging" Selector="$Config/DebugLogging$" ParameterType="bool" />
          <OverrideableParameter ID="FilePath" Selector="$Config/FilePath$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
                <ScriptName>Proactive.DFS.Watcher.Monitoring.Class.Discovery.DS.v10037.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to discover a SCOM class when a File Exists
#
#  Author: Kevin Holman
#  v1.0
#=================================================================================
param($SourceId,$ManagedEntityId,$ComputerName,$MGName,$DebugLogging,$FilePath)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $SourceId = '{00000000-0000-0000-0000-000000000000}'
# $ManagedEntityId = '{00000000-0000-0000-0000-000000000000}'
# $ComputerName = "computername.domain.com"
# $MGName = "MGNAME"
# $DebugLogging = "true"
# $FilePath = "D:\scripts\powershell\DFSR\Home_Logs"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "DFS.Watcher.Monitoring.Class.Discovery.DS.v10037.ps1"
$EventID = "662"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script is starting. `nFilePath: ($FilePath). `nRunning as ($whoami). `nManagement Group: ($MGName). `nDebugLogging: ($DebugLogging)")
#=================================================================================


# Discovery Script section - Discovery scripts get this
#=================================================================================
# Load SCOM Discovery module
$DiscoveryData = $momapi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
#=================================================================================	


# Begin MAIN script section
#=================================================================================

# Test to see if filepath exists
$FilePathExists = Test-Path $FilePath

# If filpath exists create instance of class
If ($FilePathExists -eq $true)
	{
	$instance = $DiscoveryData.CreateClassInstance("$MPElement[Name='DFS.Watcher.Monitoring.Seed.Class']$")
	$instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $ComputerName)
	$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $ComputerName)
	$DiscoveryData.AddInstance($instance)

	IF ($DebugLogging.ToUpper() -eq "TRUE")
		{	
		# Log an event that objects were discovered
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"Discovery script is returning objects for ($ComputerName) because ($FilePath) exists.")
		}
	}
Else
	{
	IF ($DebugLogging.ToUpper() -eq "TRUE")
		{	
		# Log an event for no objects discovered
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"Discovery script returned no discovered objects")
		}
	}

# Return Discovery Items Normally
$DiscoveryData
# Return Discovery Bag to the command line for testing (does not work from ISE)
# $momapi.Return($DiscoveryData)
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script Completed. `nScript Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>SourceId</Name>
                    <Value>$MPElement$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ManagedEntityId</Name>
                    <Value>$Target/Id$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ComputerName</Name>
                    <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>MGName</Name>
                    <Value>$Target/ManagementGroup/Name$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>DebugLogging</Name>
                    <Value>$Config/DebugLogging$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>FilePath</Name>
                    <Value>$Config/FilePath$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="DS" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Discovery.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.DFSR.ReplicationAndBacklog.Monitor.DataSource" Accessibility="Internal" RunAs="MWFDRL!Microsoft.Windows.FileServer.DFSR.MonitoringAccount" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>Proactive.DFSR.ReplicationAndBacklog.Monitor.DataSource.v10037.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  DFSR replication backlog monitor
#
#  Author:  Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
$ScriptName = "Proactive.DFSR.ReplicationAndBacklog.Monitor.DataSource.v10037.ps1"
$EventID = "542"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
# Load PropertyBag function 
$bag = $momapi.CreatePropertyBag()
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script is starting. Running as ($whoami).")
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Set the condition = bad.  This represents your script finding something wrong
#
#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

#
# Monitor DFS replication

$DFSFolders = Get-WmiObject -Namespace 'root\MicrosoftDFS' -Class DfsrReplicatedFolderInfo | Select-Object ReplicatedFolderName,ReplicationGroupName,State

# Check for configured folders

if ($DFSFolders.count -eq 0 )
	{
	write-host "NO replicated folders configured"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"NO replicated folders configured")
	}

# Test replication state of folders
foreach ($folder in $DFSFolders)
	{
	if ($folder.state -ne 4 )
		{
		write-host "DFS folder $($folder.ReplicatedFolderName) with mount point $($folder.ReplicationGroupName) NOT healthy"
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"DFS folder $($folder.ReplicatedFolderName) with mount point $($folder.ReplicationGroupName) NOT healthy")
		}
	}
	
$DFSFolders

# Backlog check
$Backlog2to1 = Get-DfsrBacklog -GroupName ##DFSFileShare##\fs1\home -FolderName home -SourceComputerName ##DFSServerNamingConvention##12s2 -DestinationComputerName ##DFSServerNamingConvention##12s1 -verbose
$Backlog1to2 = Get-DfsrBacklog -GroupName ##DFSFileShare##\fs1\home -FolderName home -SourceComputerName ##DFSServerNamingConvention##12s1 -DestinationComputerName ##DFSServerNamingConvention##12s2 -verbose

$Backlog2to1.Count
$Backlog1to2.Count

if ($Backlog2to1.count -gt 50000 )
	{
	write-host "DFSR Replication backlog greater than 50000"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"DFSR Home filesystem has backlog greater than 50000 from Site2 to Site1, currently at ($Backlog2to1.count)")
	}
if ($Backlog1to2.count -gt 50000 )
	{
	write-host "DFSR Replication backlog greater than 50000"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"DFSR Home filesystem has backlog greater than 50000 from Site2 to Site1, currently at ($Backlog2to1.count)")
	}
	
# Build expression to validate variables for array

$DFSBacklog = @()

# Write array with the alert details
$DFSBacklog += "# DFS Backlog check"
$DFSBacklog += "#============================================================"
$DFSBacklog += "File Backlog from site 2 to site 1"
$DFSBacklog += "============================="
$DFSBacklog += $Backlog2to1.Count
$DFSBacklog += ""
$DFSBacklog += "File Backlog from site 1 to site 2"
$DFSBacklog += "============================="
$DFSBacklog += $Backlog1to2.Count
$DFSBacklog += ""
$DFSBacklog += "#============================================================"

$DFSBacklog

$DFSBacklog = $DFSBacklog | out-string

#============================================================


  $Result = "GOOD"
  $Message = "DFS Monitors auto-closed for ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"DFS alert report for ($date). `n `n$DFSBacklog")

#$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DFSBacklog)


# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.DFSR.ReplicationAndBacklog.Watcher.Monitor.DataSource" Accessibility="Internal" RunAs="MWFDRL!Microsoft.Windows.FileServer.DFSR.MonitoringAccount" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>Microsoft.Windows.Server.FileServices.2016.Addendum.Backlog.Watcher.Script.Alert.DataSource.v10037.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DFSR backlog and check Engineering script
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Microsoft.Windows.Server.FileServices.2016.Addendum.Backlog.Watcher.Script.Alert.DataSource.v10037.ps1"
$EventID = "546"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================
# Write date format
$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"Gather DFSR backlog files for past 4 hours on date ($date).")

# Get time to run every 4 hours
$Time = [DateTime](Get-Date).AddHours(-4)

#Set Date format for files
$curdate = get-date -Format yyyy-MM-ddT

# Check if script running, logging output files
$DFSLogs = gci d:\scripts\powershell\dfsr\Home_logs\$curdate* | ? { $_.LastWriteTime -gt $Time }
$PSTDFSLogs = gci d:\scripts\powershell\dfsr\PST_Logs\$curdate* | ? { $_.LastWriteTime -gt $Time }

# Test for entries
if ( $DFSLogs.count -eq 0 )
	{
	write-host "NO files logged in past 4 hours"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nNO DFSR backlog check script output files in past 4 hours for ($date).")
	}

if ( $PSTDFSLogs.count -eq 0 )
	{
	write-host "NO files logged in past 4 hours"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nNO PST DFSR backlog check script output files in past 4 hours for ($date).")
	}

# Gather log files for past $Time
$DFSBacklog = gci d:\scripts\powershell\dfsr\Home_logs\$curdate* | ? { $_.LastWriteTime -gt $Time } | get-content | ? {$_.trim() -ne "" } | sort -uniq
$PSTDFSBacklog = gci d:\scripts\powershell\dfsr\PST_logs\$curdate* | ? { $_.LastWriteTime -gt $Time } | get-content | ? {$_.trim() -ne "" } | sort -uniq

# Debug
$Test = $DFSBacklog.count

# Backlog count
$DFSBacklogCount = @()

# Check replication backlog count
foreach ( $LLine in $DFSBacklog )
	{
	#$LLine;
	if ( $LLine -like "No backlog for the replicated folder*" )
		{
		write-host "script missing replication folder"
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"DFSR backlog script missing replication folder - engage SysAdmin for resolution.")
		}
	else
		{
		$Lmatch = $LLine |select-string -pattern ':'
		#if ($Lmatch)
		#{
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#write-host "field 2"; $LLineSplit[2]; 
		$LLineSplit2 = $LLineSplit.Split(" ")
		#write-host "field 14"; $LLineSplit2[14]
		$PSTDFSBacklogCount += [int]$LLineSplit2[14]
		if ( !$Lmatch )
			{
			write-host "line type not matched"
			#$momapi.LogScriptEvent($ScriptName,$EventID,0,"DFSR backlog script blank indicating replication broken, engage SysAdmin for resolution.")
			}
		}
	}

# Evaluate Backlog Count
#==================================================
# Backlog count - when to alert
foreach ($Backlog in $DFSBacklogCount)
	{
	if ( $Backlog -gt 3000 )
		{
		#write-host "Backlog files greater than 50k"
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"DFSR backlog file count over 50k in past 4 hours, engage Engineering for resolution.")
		}
	if ( $Backlog -lt 3000 )
		{
		#write-host "Backlog files less than 50k"
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"DFSR backlog file count less than 50k in past 4 hours.")
		}
	}

# New condition for backlog null
#==================================================
# Backlog count - when to alert
foreach ($Backlog in $DFSBacklogCount)
	{
	if ( $Backlog -eq $null )
		{
		write-host "Backlog files null"
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"DFSR backlog file count null in past 4 hours, engage Engineering for resolution.")
		}
	}


# New condition for PST DFS sync
#==================================================
$PSTDFSBacklogCount = @()

# Check replication backlog count
foreach ( $LLine in $PSTDFSBacklog )
	{
	#$LLine;
	if ( $LLine -like "No backlog for the replicated folder*" )
		{
		write-host "script missing replication folder"
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"PST DFSR backlog script missing replication folder - engage SysAdmin for resolution.")
		}
	else
		{
		$Lmatch = $LLine |select-string -pattern ':'
		#if ($Lmatch)
		#{
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#write-host "field 2"; $LLineSplit[2]; 
		$LLineSplit2 = $LLineSplit.Split(" ")
		#write-host "field 14"; $LLineSplit2[14]
		$PSTDFSBacklogCount += [int]$LLineSplit2[14]
		if ( !$Lmatch )
			{
			write-host "line type not matched"
			#$momapi.LogScriptEvent($ScriptName,$EventID,0,"PST DFSR backlog script blank indicating replication broken, engage SysAdmin for resolution.")
			}
		}
	}


# Evaluate PST Backlog Count
#==================================================
# Backlog count - when to alert
foreach ($Backlog in $PSTDFSBacklogCount)
	{
	if ( $Backlog -gt "3000" )
		{
		write-host "Backlog files greater than 3k"
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"PST DFSR backlog file count over 3k in past 4 hours, engage Engineering for resolution.")
		}
	if ( $Backlog -lt "3000" )
		{
		write-host "Backlog files less than 3k"
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"PST DFSR backlog file count less than 3k in past 4 hours.")
		}
	}
 
# New condition for PST backlog null
#==================================================
# Backlog count - when to alert
foreach ($Backlog in $PSTDFSBacklogCount)
	{
	if ( $Backlog -eq $null )
		{
		write-host "Backlog files null"
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"PST DFSR backlog file count null in past 4 hours, engage Engineering for resolution.")
		}
	}

#============================================================
 
$Result = "GOOD"
$Message = "DFSR Backlog files for ($date)"

#$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DFSBacklogCount)


# Return all bags
$bag
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.DailyTasks.DFSAlerts.Report.Script.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>05:39</Start>
                        <End>05:59</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>Proactive.DailyTasks.DFSAlerts.Report.Script.Datasource.v10037.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather Windows DFS File Services alerts report
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DailyTasks.DFSAlerts.Report.Script.Datasource.v10037.ps1"
$EventID = "544"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"Gather Windows DFS File Services alerts for date ($date).")

$AllDFSAlerts = get-scomalert | ? { ( $_.Name -like "*DFS*" ) `
	-AND ( $_.ResolutionState -ne "255" ) `
	}  | ft MonitoringObjectDisplayName,Description -auto -wrap

$DFSAlerts = get-scomalert -ResolutionState (0..254) | ? { ( $_.Name -eq "DFS-R: A Replicated Folder is Missing an Outbound Connection" ) `
    -OR ( $_.Name -eq "DFS-R: Communication Error During Replication" ) `
    -OR ( $_.Name -eq "DFS-R: Conflicting Configuration Objects in AD DS" ) `
    -OR ( $_.Name -eq "DFS-R: Connection or Replication Group Configuration Doesn't Match with AD DS" ) `
    -OR ( $_.Name -eq "DFS-R: DFS Replication Service Is Stopped" ) `
    -OR ( $_.Name -eq "DFS-R: Failed to Reach a Replication Group Member" ) `
    -OR ( $_.Name -eq "DFS-R: Out of Disk Space" ) `
    -OR ( $_.Name -eq "DFS-R: Replicate Folder Was Offline for Too Many Days" ) `
    -OR ( $_.Name -eq "DFS-R: Replication Database Internal Error" ) `
	-OR ( $_.Name -eq "DFS-R: Replication Stopped Due to an Error on a Volume" ) `
    -OR ( $_.Name -eq "DFS-R: Unexpected Service Shutdown" ) `
    -OR ( $_.Name -eq "DFS Replication 2104 Event ID with Message contains 'Internal database error' Alert Monitor" ) `	
    -OR ( $_.Name -eq "Proactive DFSR Replication And Backlog Monitor" ) `
    -OR ( $_.Name -like "DFS Monitors auto-closed for*" ) `
	}
	#| ? { $_.ResolutionState -ne "255"}  | ft MonitoringObjectDisplayName,Description -auto -wrap

$Test = $DFSAlerts.count


#
# Build report
#=========================
$DFSAMessage = @()

if ($DFSAlerts.count -eq 0 )
	{
	$DFSAMessage += "ZERO alerts for FileServices DFS for ($date)"
	$Message = "ZERO alerts for FileServices DFS for ($date)"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message")
	$bag.AddValue('Count',$Test)
	$bag.AddValue('Message',$Message)
	$bag.AddValue('Summary',$DFSAMessage)
	}

if ($DFSAlerts.count -gt 0 )
	{
	$DFSAMessage += ""
	$DFSAMessage += "Alert Count = $Test"
	$DFSAMessage += ""
	$DFSAMessage += "# DFS Alert report"
	$DFSAMessage += "#"
	$DFSAMessage += "#============================================================"
	$DFSAMessage += "# Number of open Windows DFS File Services alerts"
	$DFSAMessage += "#=========================="
	$DFSAMessage += $DFSAlerts.Count
	$DFSAMessage += ""
	$DFSAMessage += "# Windows DFS File Services alerts that were auto closed"
	$DFSAMessage += "#==============================="
	$DFSAMessage += $DFSAlerts | ft TimeRaised,MonitoringObjectDisplayName,Description -auto -wrap
	$DFSAMessage += "#============================================================"
	$DFSAMessage += ""

	$DFSAMessage
	
	#============================================================

$DFSAMessage = $DFSAMessage | out-string
$Result = "GOOD"
$momapi.LogScriptEvent($ScriptName,$EventID,0,"DFS alert report for ($date). `n `n$DFSAMessage")

#$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DFSAMessage)
	}
	
# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.DailyTasks.DFSAlerts.Close.Script.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>05:50</Start>
                        <End>06:20</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>Proactive.DailyTasks.DFSAlerts.Close.Script.Datasource.v10037.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather Windows DFS File Services alerts and close via on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DailyTasks.DFSAlerts.Close.Script.Datasource.v10037.ps1"
$EventID = "544"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"
$Age = [DateTime](Get-Date).AddDays(-1)

$momapi.LogScriptEvent($ScriptName,$EventID,0,"Gather Windows DFS File Services alerts for date ($date).")

# Gather Windows DFS File Services alerts
$DFSAlerts = get-scomalert -ResolutionState (0..254) | ? { ( $_.Name -like "*DFS*" ) `
	}  
	# | ft MonitoringObjectDisplayName,Description -auto -wrap

$DFSAlertsToClose = $DFSAlerts | ? { ( $_.Name -like "*Corruptions*" ) `
    -OR ( $_.Name -eq "SMB Witness client received error from a SMB Witness server" ) `
	}

$Test = $DFSAlerts | where { $_.Name -notlike "*rule*" }
$Test.count


# Gather DFS management packs and put into array
#=================================================================================
$DFSMgmtPackArray = @()

$DFSMgmtPackArray += "File Services Management Pack for Windows Server 2016 and above"
$DFSMgmtPackArray += "Microsoft Windows Server Data Deduplication 2016 and above"
$DFSMgmtPackArray += "Microsoft Windows Server DFS Namespaces"
$DFSMgmtPackArray += "Microsoft Windows Server DFS Replication"
$DFSMgmtPackArray += "Microsoft Windows Server File Server Resource Manager 2016 and above"
$DFSMgmtPackArray += "Microsoft Windows Server iSCSI Target 2016 and above"
$DFSMgmtPackArray += "Microsoft Windows Server NFS 2016 and above"
$DFSMgmtPackArray += "Microsoft Windows Server SMB 2016 and above"
$DFSMgmtPackArray += "Microsoft Windows Server Work Folders 2016 and above"


## Grab the MP, get the Monitors and Rules from the MP, then grab all alerts found inside the Monitors/Rules
#=================================================================================
$SCOMCoreMP = @()
$SCOMCoreRules = @()
$SCOMCoreMonitors = @()

foreach ( $DFSpack in $DFSMgmtPackArray )
	{
	$SCOMCoreMP += Get-SCOMManagementPack -DisplayName $DFSpack

	$SCOMCoreRules += $SCOMCoreMP.GetRules()
	$SCOMCoreMonitors += $SCOMCoreMP.GetMonitors()
	}

$SCOMCoreMonitors.Count


#
# Build report

$DFSAMessage = @()
$DFSAMessage += ""
$DFSAMessage += "Alert Count = $Test "
$DFSAMessage += ""
$DFSAMessage += "# DFS Alert report"
$DFSAMessage += "#"
$DFSAMessage += "#============================================================"
$DFSAMessage += "# Number of open Windows DFS File Services alerts"
$DFSAMessage += "#=========================="
$DFSAMessage += $DFSAlerts | out-string
$DFSAMessage += ""	
$DFSAMessage += ""
$DFSAMessage += "# Windows DFS File Services alerts that were auto closed"
$DFSAMessage += "#==============================="
$DFSAMessage += "# Alert Count = $($DFSAlertsToClose.Count)"
$DFSAMessage += "#========================================="
#$DFSAMessage += "# Monitors"
#$DFSAMessage += $MonitorsToAutoClose | out-string
#$DFSAMessage += ""
#$DFSAMessage += "# Rules"
#$DFSAMessage += $RulesToAutoClose | out-string
#$DFSAMessage += "#============================================================"
$DFSAMessage += ""

$DFSAMessage

$DFSAMessage = $DFSAMessage | out-string

#=================================================================================

  $Result = "GOOD"
  $Message = "Windows DFS File Services Monitors auto-closed for ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"Windows DFS File Services alert report for ($date).")

#$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DFSAMessage)


# Return all bags
$bag
#============================================================


#
# Rule Alerts to auto close
#=================================================================================
# (Rules) Alerts to auto close after reset monitor
$SCOMCoreRulesToClear = $SCOMCoreRuleAlerts | where { ( $_.TimeAdded -lt $Age ) }
# Convert Age back to days for alert properties logging

$Days = ((Get-date) - $Age).Days
if ( $SCOMCoreRulesToClear.Count -gt 0 )
	{
	$SCOMCoreRulesToClear | Resolve-SCOMAlert -Comment "Closing $Days day old alerts after report alert generated - Proactive DailyTasks Windows DFS File Services addendum DS"
	}


# Write event for rule closure
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Proactive DailyTasks Windows DFS File Services addendum rule reset completed for ($date)")


# Monitor Alerts to auto close after rule automation
#=================================================================================

#=================================================================================
# Reset Monitors Script base code modified
# Put ps1 in mgmtpacks folder
# https://sc.scomurr.com/scom-2012-monitor-reset-cleaning-up-the-environment/
#	Download
# https://gallery.technet.microsoft.com/SCOM-2012-Batch-reset-63a17534
	
#Alternate
#https://gallery.technet.microsoft.com/scriptcenter/Auto-reset-script-for-d8b775ca

# Changed up logic to sort unique classes in mgmnt pack families.
# Added Age variable for monitors thanks to Aris Somatis - $Age specified in top level variables
# Cycling through monitors made reset loop huge ~650 monitors when only ~50 classes
# New logic reduced runtime from 8 minutes to roughly 8 seconds
#=================================================================================


if ( $Test.Count -gt 0 )
	{
	# DFS pack naming
	$DFSClasses = @(Get-SCOMClass -Name "*FileServices*"; Get-SCOMClass -Name "*FileServer*"; Get-SCOMClass -Name "*DFS*" )
	$DFSClass = $DFSClasses | sort -property Name -uniq
	# Debug
	$DFSClass.Count

	# Set up monitor objects to reset
	foreach ($Class in $DFSClass)
		{
		$ActiveMonitors = @(Get-SCOMClassInstance -Class $Class | ? { ($_.healthstate -ne 'Success') -AND ( $_.healthstate -ne 'Uninitialized') -AND ($_.IsAvailable -eq $true) } )
		# Debug
		$ActiveMonitors.Count
		# $ActiveMonitors | fl -property *
		write-host "Found" $ActiveMonitors.Count "unhealthy monitors for class" $Class
		foreach ( $UnhealthyOLDMonitor in $ActiveMonitors )
			{
			#if ( $UnhealthyOLDMonitor.AvailabilityLastModified -lt $Age )
			if ( $UnhealthyOLDMonitor.StateLastModified -lt $Age )
				{
				#$UnhealthyMonitors += $ActiveMonitors.Count					
				#UnhealthyOLDMonitor | select AvailabilityLastModified,Path,DisplayName
				#$UnhealthyOLDMonitor.Count
				#write-host "Found" + $UnhealthyOLDMonitor.Count + "unhealthy monitor beyond" $Age "days."
				#write-host ""
				if ( $ActiveMonitors.Count -gt 0)
					{
					foreach ( $ActiveMonitor in $UnhealthyOLDMonitor )
						{
						# Debug
						#$ActiveMonitor.ID
						$ActiveMonitor
						write-host " Resetting Health State on '" + $ActiveMonitor.FullName + "'" 
						write-host ""
						$ActiveMonitor.ResetMonitoringState($ActiveMonitor)
						}
					}
				}
			}
		}
	# Debug
	#$MonitorClass | fl -property *
	#$MonitorClass | select DisplayName,ID
	}


# Debug Write event for rule closure
# $UnhealthyMonitors = $($UnhealthyMonitors | measure-object -sum).sum
# Write event for rule closure
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Proactive DailyTasks DFS FileServices monitor reset automation completed for ($date)")


#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>

      <WriteActionModuleType ID="Proactive.DailyTasks.DFSAlerts.Report.Script.Alert.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.DailyTasks.DFSAlerts.Report.Script.Alert.WA.v10037.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather Windows DFS File Services alerts and close via on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DailyTasks.DFSAlerts.Report.Script.Alert.WA.v10037.ps1"
$EventID = "545"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"Gather Windows DFS File Services alerts for date ($date).")

$AllDFSAlerts = get-scomalert | ? { ( $_.Name -like "*DFS*" ) `
	-AND ( $_.ResolutionState -ne "255" ) `
	}  | ft MonitoringObjectDisplayName,Description -auto -wrap

$DFSAlerts = get-scomalert -ResolutionState (0..254) | ? { ( $_.Name -eq "DFS-R: A Replicated Folder is Missing an Outbound Connection" ) `
    -OR ( $_.Name -eq "DFS-R: Communication Error During Replication" ) `
    -OR ( $_.Name -eq "DFS-R: Conflicting Configuration Objects in AD DS" ) `
    -OR ( $_.Name -eq "DFS-R: Connection or Replication Group Configuration Doesn't Match with AD DS" ) `
    -OR ( $_.Name -eq "DFS-R: DFS Replication Service Is Stopped" ) `
    -OR ( $_.Name -eq "DFS-R: Failed to Reach a Replication Group Member" ) `
    -OR ( $_.Name -eq "DFS-R: Out of Disk Space" ) `
    -OR ( $_.Name -eq "DFS-R: Replicate Folder Was Offline for Too Many Days" ) `
    -OR ( $_.Name -eq "DFS-R: Replication Database Internal Error" ) `
	-OR ( $_.Name -eq "DFS-R: Replication Stopped Due to an Error on a Volume" ) `
    -OR ( $_.Name -eq "DFS-R: Unexpected Service Shutdown" ) `
    -OR ( $_.Name -eq "DFS Replication 2104 Event ID with Message contains 'Internal database error' Alert Monitor" ) `	
    -OR ( $_.Name -eq "Proactive DFSR Replication And Backlog Monitor" ) `
    -OR ( $_.Name -like "DFS Monitors auto-closed for*" ) `
	}
	#| ? { $_.ResolutionState -ne "255"}  | ft MonitoringObjectDisplayName,Description -auto -wrap

$Test = $DFSAlerts.count


#
# Build report
#=========================
$DFSAMessage = @()

if ($DFSAlerts.count -eq 0 )
	{
	$DFSAMessage += "ZERO alerts for FileServices DFS for ($date)"
	$Message = "ZERO alerts for FileServices DFS for ($date)"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message")
	$bag.AddValue('Count',$Test)
	$bag.AddValue('Message',$Message)
	$bag.AddValue('Summary',$DFSAMessage)
	}

if ($DFSAlerts.count -gt 0 )
	{
	$DFSAMessage += ""
	$DFSAMessage += "Alert Count = $Test"
	$DFSAMessage += ""
	$DFSAMessage += "# DFS Alert report"
	$DFSAMessage += "#"
	$DFSAMessage += "#============================================================"
	$DFSAMessage += "# Number of open Windows DFS File Services alerts"
	$DFSAMessage += "#=========================="
	$DFSAMessage += $DFSAlerts.Count
	$DFSAMessage += ""
	$DFSAMessage += "# Windows DFS File Services alerts that were auto closed"
	$DFSAMessage += "#==============================="
	$DFSAMessage += $DFSAlerts | ft TimeRaised,MonitoringObjectDisplayName,Description -auto -wrap
	$DFSAMessage += "#============================================================"
	$DFSAMessage += ""

	$DFSAMessage
	
	#============================================================

$DFSAMessage = $DFSAMessage | out-string
$Result = "GOOD"
$momapi.LogScriptEvent($ScriptName,$EventID,0,"DFS alert report for ($date). `n `n$DFSAMessage")

#$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DFSAMessage)
	}
	
# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.DailyTasks.DFSAlerts.Close.Script.Alert.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.DailyTasks.DFSAlerts.Close.Script.Alert.WA.v10037.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather Windows DFS File Services alerts and close via on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DailyTasks.DFSAlerts.Close.Script.Alert.WA.v10037.ps1"
$EventID = "545"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"
$Age = [DateTime](Get-Date).AddDays(-1)

$momapi.LogScriptEvent($ScriptName,$EventID,0,"Gather Windows DFS File Services alerts for date ($date).")

# Gather Windows DFS File Services alerts
$DFSAlerts = get-scomalert -ResolutionState (0..254) | ? { ( $_.Name -like "*DFS*" ) `
	}  
	# | ft MonitoringObjectDisplayName,Description -auto -wrap

$DFSAlertsToClose = $DFSAlerts | ? { ( $_.Name -like "*Corruptions*" ) `
    -OR ( $_.Name -eq "SMB Witness client received error from a SMB Witness server" ) `
	}

$Test = $DFSAlerts | where { $_.Name -notlike "*rule*" }
$Test.count


# Gather DFS management packs and put into array
#=================================================================================
$DFSMgmtPackArray = @()

$DFSMgmtPackArray += "File Services Management Pack for Windows Server 2016 and above"
$DFSMgmtPackArray += "Microsoft Windows Server Data Deduplication 2016 and above"
$DFSMgmtPackArray += "Microsoft Windows Server DFS Namespaces"
$DFSMgmtPackArray += "Microsoft Windows Server DFS Replication"
$DFSMgmtPackArray += "Microsoft Windows Server File Server Resource Manager 2016 and above"
$DFSMgmtPackArray += "Microsoft Windows Server iSCSI Target 2016 and above"
$DFSMgmtPackArray += "Microsoft Windows Server NFS 2016 and above"
$DFSMgmtPackArray += "Microsoft Windows Server SMB 2016 and above"
$DFSMgmtPackArray += "Microsoft Windows Server Work Folders 2016 and above"


## Grab the MP, get the Monitors and Rules from the MP, then grab all alerts found inside the Monitors/Rules
#=================================================================================
$SCOMCoreMP = @()
$SCOMCoreRules = @()
$SCOMCoreMonitors = @()

foreach ( $DFSpack in $DFSMgmtPackArray )
	{
	$SCOMCoreMP += Get-SCOMManagementPack -DisplayName $DFSpack

	$SCOMCoreRules += $SCOMCoreMP.GetRules()
	$SCOMCoreMonitors += $SCOMCoreMP.GetMonitors()
	}

$SCOMCoreMonitors.Count


#
# Build report

$DFSAMessage = @()
$DFSAMessage += ""
$DFSAMessage += "Alert Count = $Test "
$DFSAMessage += ""
$DFSAMessage += "# DFS Alert report"
$DFSAMessage += "#"
$DFSAMessage += "#============================================================"
$DFSAMessage += "# Number of open Windows DFS File Services alerts"
$DFSAMessage += "#=========================="
$DFSAMessage += $DFSAlerts | out-string
$DFSAMessage += ""	
$DFSAMessage += ""
$DFSAMessage += "# Windows DFS File Services alerts that were auto closed"
$DFSAMessage += "#==============================="
$DFSAMessage += "# Alert Count = $($DFSAlertsToClose.Count)"
$DFSAMessage += "#========================================="
#$DFSAMessage += "# Monitors"
#$DFSAMessage += $MonitorsToAutoClose | out-string
#$DFSAMessage += ""
#$DFSAMessage += "# Rules"
#$DFSAMessage += $RulesToAutoClose | out-string
#$DFSAMessage += "#============================================================"
$DFSAMessage += ""

$DFSAMessage

$DFSAMessage = $DFSAMessage | out-string

#=================================================================================

  $Result = "GOOD"
  $Message = "Windows DFS File Services Monitors auto-closed for ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"Windows DFS File Services alert report for ($date).")

#$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DFSAMessage)


# Return all bags
$bag
#============================================================


#
# Rule Alerts to auto close
#=================================================================================
# (Rules) Alerts to auto close after reset monitor
$SCOMCoreRulesToClear = $SCOMCoreRuleAlerts | where { ( $_.TimeAdded -lt $Age ) }
# Convert Age back to days for alert properties logging

$Days = ((Get-date) - $Age).Days
if ( $SCOMCoreRulesToClear.Count -gt 0 )
	{
	$SCOMCoreRulesToClear | Resolve-SCOMAlert -Comment "Closing $Days day old alerts after report alert generated - Proactive DailyTasks Windows DFS File Services addendum DS"
	}


# Write event for rule closure
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Proactive DailyTasks Windows DFS File Services addendum rule reset completed for ($date)")


# Monitor Alerts to auto close after rule automation
#=================================================================================

#=================================================================================
# Reset Monitors Script base code modified
# Put ps1 in mgmtpacks folder
# https://sc.scomurr.com/scom-2012-monitor-reset-cleaning-up-the-environment/
#	Download
# https://gallery.technet.microsoft.com/SCOM-2012-Batch-reset-63a17534
	
#Alternate
#https://gallery.technet.microsoft.com/scriptcenter/Auto-reset-script-for-d8b775ca

# Changed up logic to sort unique classes in mgmnt pack families.
# Added Age variable for monitors thanks to Aris Somatis - $Age specified in top level variables
# Cycling through monitors made reset loop huge ~650 monitors when only ~50 classes
# New logic reduced runtime from 8 minutes to roughly 8 seconds
#=================================================================================


if ( $Test.Count -gt 0 )
	{
	# DFS pack naming
	$DFSClasses = @(Get-SCOMClass -Name "*FileServices*"; Get-SCOMClass -Name "*FileServer*"; Get-SCOMClass -Name "*DFS*" )
	$DFSClass = $DFSClasses | sort -property Name -uniq
	# Debug
	$DFSClass.Count

	# Set up monitor objects to reset
	foreach ($Class in $DFSClass)
		{
		$ActiveMonitors = @(Get-SCOMClassInstance -Class $Class | ? { ($_.healthstate -ne 'Success') -AND ( $_.healthstate -ne 'Uninitialized') -AND ($_.IsAvailable -eq $true) } )
		# Debug
		$ActiveMonitors.Count
		# $ActiveMonitors | fl -property *
		write-host "Found" $ActiveMonitors.Count "unhealthy monitors for class" $Class
		foreach ( $UnhealthyOLDMonitor in $ActiveMonitors )
			{
			#if ( $UnhealthyOLDMonitor.AvailabilityLastModified -lt $Age )
			if ( $UnhealthyOLDMonitor.StateLastModified -lt $Age )
				{
				#$UnhealthyMonitors += $ActiveMonitors.Count					
				#UnhealthyOLDMonitor | select AvailabilityLastModified,Path,DisplayName
				#$UnhealthyOLDMonitor.Count
				#write-host "Found" + $UnhealthyOLDMonitor.Count + "unhealthy monitor beyond" $Age "days."
				#write-host ""
				if ( $ActiveMonitors.Count -gt 0)
					{
					foreach ( $ActiveMonitor in $UnhealthyOLDMonitor )
						{
						# Debug
						#$ActiveMonitor.ID
						$ActiveMonitor
						write-host " Resetting Health State on '" + $ActiveMonitor.FullName + "'" 
						write-host ""
						$ActiveMonitor.ResetMonitoringState($ActiveMonitor)
						}
					}
				}
			}
		}
	# Debug
	#$MonitorClass | fl -property *
	#$MonitorClass | select DisplayName,ID
	}


# Debug Write event for rule closure
# $UnhealthyMonitors = $($UnhealthyMonitors | measure-object -sum).sum
# Write event for rule closure
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Proactive DailyTasks DFS FileServices monitor reset automation completed for ($date)")


#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.DFSR.ReplicationAndBacklog.Watcher.Script.Alert.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Microsoft.Windows.Server.FileServices.2016.Addendum.Backlog.Watcher.Script.Alert.WA.v10037.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DFSR backlog and check Engineering script
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================
 
 
# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Microsoft.Windows.Server.FileServices.2016.Addendum.Backlog.Watcher.Script.Alert.WA.v10037.ps1"
$EventID = "547"
#=================================================================================
 
 
# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================
# Write date format
$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"Gather DFSR backlog files for past 4 hours on date ($date).")

# Get time to run every 4 hours
$Time = [DateTime](Get-Date).AddHours(-4)

#Set Date format for files
$curdate = get-date -Format yyyy-MM-ddT

# Check if script running, logging output files
$DFSLogs = gci d:\scripts\powershell\dfsr\Home_logs\$curdate* | ? { $_.LastWriteTime -gt $Time }
$PSTDFSLogs = gci d:\scripts\powershell\dfsr\PST_Logs\$curdate* | ? { $_.LastWriteTime -gt $Time }

# Test for entries
if ( $DFSLogs.count -eq 0 )
	{
	write-host "NO files logged in past 4 hours"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nNO DFSR backlog check script output files in past 4 hours for ($date).")
	}

if ( $PSTDFSLogs.count -eq 0 )
	{
	write-host "NO files logged in past 4 hours"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nNO PST DFSR backlog check script output files in past 4 hours for ($date).")
	}

# Gather log files for past $Time
$DFSBacklog = gci d:\scripts\powershell\dfsr\Home_logs\$curdate* | ? { $_.LastWriteTime -gt $Time } | get-content | ? {$_.trim() -ne "" } | sort -uniq
$PSTDFSBacklog = gci d:\scripts\powershell\dfsr\PST_logs\$curdate* | ? { $_.LastWriteTime -gt $Time } | get-content | ? {$_.trim() -ne "" } | sort -uniq

# Debug
$Test = $DFSBacklog.count

# Backlog count
$DFSBacklogCount = @()

# Check replication backlog count
foreach ( $LLine in $DFSBacklog )
	{
	#$LLine;
	if ( $LLine -like "No backlog for the replicated folder*" )
		{
		write-host "script missing replication folder"
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"DFSR backlog script missing replication folder - engage SysAdmin for resolution.")
		}
	else
		{
		$Lmatch = $LLine |select-string -pattern ':'
		#if ($Lmatch)
		#{
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#write-host "field 2"; $LLineSplit[2]; 
		$LLineSplit2 = $LLineSplit.Split(" ")
		#write-host "field 14"; $LLineSplit2[14]
		$PSTDFSBacklogCount += [int]$LLineSplit2[14]
		if ( !$Lmatch )
			{
			write-host "line type not matched"
			#$momapi.LogScriptEvent($ScriptName,$EventID,0,"DFSR backlog script blank indicating replication broken, engage SysAdmin for resolution.")
			}
		}
	}

# Evaluate Backlog Count
#==================================================
# Backlog count - when to alert
foreach ($Backlog in $DFSBacklogCount)
	{
	if ( $Backlog -gt 3000 )
		{
		#write-host "Backlog files greater than 50k"
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"DFSR backlog file count over 50k in past 4 hours, engage Engineering for resolution.")
		}
	if ( $Backlog -lt 3000 )
		{
		#write-host "Backlog files less than 50k"
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"DFSR backlog file count less than 50k in past 4 hours.")
		}
	}

# New condition for backlog null
#==================================================
# Backlog count - when to alert
foreach ($Backlog in $DFSBacklogCount)
	{
	if ( $Backlog -eq $null )
		{
		write-host "Backlog files null"
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"DFSR backlog file count null in past 4 hours, engage Engineering for resolution.")
		}
	}


# New condition for PST DFS sync
#==================================================
$PSTDFSBacklogCount = @()

# Check replication backlog count
foreach ( $LLine in $PSTDFSBacklog )
	{
	#$LLine;
	if ( $LLine -like "No backlog for the replicated folder*" )
		{
		write-host "script missing replication folder"
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"PST DFSR backlog script missing replication folder - engage SysAdmin for resolution.")
		}
	else
		{
		$Lmatch = $LLine |select-string -pattern ':'
		#if ($Lmatch)
		#{
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#write-host "field 2"; $LLineSplit[2]; 
		$LLineSplit2 = $LLineSplit.Split(" ")
		#write-host "field 14"; $LLineSplit2[14]
		$PSTDFSBacklogCount += [int]$LLineSplit2[14]
		if ( !$Lmatch )
			{
			write-host "line type not matched"
			#$momapi.LogScriptEvent($ScriptName,$EventID,0,"PST DFSR backlog script blank indicating replication broken, engage SysAdmin for resolution.")
			}
		}
	}


# Evaluate PST Backlog Count
#==================================================
# Backlog count - when to alert
foreach ($Backlog in $PSTDFSBacklogCount)
	{
	if ( $Backlog -gt "3000" )
		{
		write-host "Backlog files greater than 3k"
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"PST DFSR backlog file count over 3k in past 4 hours, engage Engineering for resolution.")
		}
	if ( $Backlog -lt "3000" )
		{
		write-host "Backlog files less than 3k"
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"PST DFSR backlog file count less than 3k in past 4 hours.")
		}
	}
 
# New condition for PST backlog null
#==================================================
# Backlog count - when to alert
foreach ($Backlog in $PSTDFSBacklogCount)
	{
	if ( $Backlog -eq $null )
		{
		write-host "Backlog files null"
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"PST DFSR backlog file count null in past 4 hours, engage Engineering for resolution.")
		}
	}

#============================================================
 
$Result = "GOOD"
$Message = "DFSR Backlog files for ($date)"

#$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DFSBacklogCount)


# Return all bags
$bag
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="Proactive.DFSR.Repeated.Event.MonitorType" Accessibility="Public">
        <MonitorTypeStates>
          <MonitorTypeState ID="RepeatedEventRaised" NoDetection="false" />
          <MonitorTypeState ID="TimerEventRaised" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <IncludeSchemaTypes>
            <SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType>
          </IncludeSchemaTypes>
          <xsd:element name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="LogName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ErrorExpression" type="ExpressionType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="AutoResolveInterval" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimerWindowInSeconds" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="RepeatCount" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="ErrorDataSource" TypeID="Windows!Microsoft.Windows.BaseEventProvider">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <LogName>$Config/LogName$</LogName>
            </DataSource>
            <ProbeAction ID="OnDemandReset" TypeID="System!System.PassThroughProbe" />
            <ConditionDetection ID="ErrorFilterCondition" TypeID="System!System.ExpressionFilter">
              <Expression>$Config/ErrorExpression$</Expression>
            </ConditionDetection>
            <ConditionDetection ID="RepeatedDataCondition" TypeID="System!System.ConsolidatorCondition">
              <Consolidator>
                <ConsolidationProperties />
                <TimeControl>
                  <WithinTimeSchedule>
                    <Interval>$Config/TimerWindowInSeconds$</Interval>
                  </WithinTimeSchedule>
                </TimeControl>
                <CountingCondition>
                  <Count>$Config/RepeatCount$</Count>
                  <CountMode>OnNewItemTestOutputRestart_OnTimerSlideByOne</CountMode>
                </CountingCondition>
              </Consolidator>
            </ConditionDetection>
            <ConditionDetection ID="TimerCondition" TypeID="System!System.TimerCondition">
              <TimerWaitInSeconds>$Config/AutoResolveInterval$</TimerWaitInSeconds>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="RepeatedEventRaised">
              <Node ID="RepeatedDataCondition">
                <Node ID="ErrorFilterCondition">
                  <Node ID="ErrorDataSource" />
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="TimerEventRaised">
              <Node ID="TimerCondition">
                <Node ID="RepeatedDataCondition">
                  <Node ID="ErrorFilterCondition">
                    <Node ID="ErrorDataSource" />
                  </Node>
                </Node>
              </Node>
            </RegularDetection>
          </RegularDetections>
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="TimerEventRaised">
              <Node ID="OnDemandReset" />
            </OnDemandDetection>
          </OnDemandDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="Proactive.DFS.ReplicationAndBacklog.DataSource.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="GoodCondition" NoDetection="false" />
          <MonitorTypeState ID="BadCondition" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="Proactive.DFSR.ReplicationAndBacklog.Monitor.DataSource">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">GoodCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">BadCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
            <OnDemandDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
          </OnDemandDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="Proactive.DFS.ReplicationAndBacklog.Watcher.DataSource.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="GoodCondition" NoDetection="false" />
          <MonitorTypeState ID="BadCondition" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="Proactive.DFSR.ReplicationAndBacklog.Watcher.Monitor.DataSource">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">GoodCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">BadCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
            <OnDemandDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
          </OnDemandDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="Proactive.DFS.Service.Monitor.MonitorType" Accessibility="Public">
        <MonitorTypeStates>
          <MonitorTypeState ID="Running" NoDetection="false" />
          <MonitorTypeState ID="NotRunning" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ServiceName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="CheckStartupType" minOccurs="0" maxOccurs="1" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Samples" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="CheckStartupType" Selector="$Config/CheckStartupType$" ParameterType="string" />
          <OverrideableParameter ID="Samples" Selector="$Config/Samples$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.Win32ServiceInformationProvider">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <ServiceName>$Config/ServiceName$</ServiceName>
              <Frequency>$Config/IntervalSeconds$</Frequency>
              <DisableCaching>true</DisableCaching>
              <CheckStartupType>$Config/CheckStartupType$</CheckStartupType>
            </DataSource>
            <ProbeAction ID="Probe" TypeID="Windows!Microsoft.Windows.Win32ServiceInformationProbe">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <ServiceName>$Config/ServiceName$</ServiceName>
            </ProbeAction>
            <ConditionDetection ID="ServiceRunning" TypeID="System!System.ExpressionFilter">
              <Expression>
                <Or>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='StartMode']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="Integer">4</Value>
                        <!-- 0=BootStart 1=SystemStart 2=Automatic 3=Manual 4=Disabled -->
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="Integer">4</Value>
                        <!-- 0=Unknown 1=Stopped 2=StartPending 3=StopPending 4=Running 5=ContinuePending 6=PausePending 7=Paused 8=ServiceNotFound 9=ServerNotFound -->
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </Or>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="ServiceNotRunning" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='StartMode']</XPathQuery>
                      </ValueExpression>
                      <Operator>NotEqual</Operator>
                      <ValueExpression>
                        <Value Type="Integer">4</Value>
                        <!-- 0=BootStart 1=SystemStart 2=Automatic 3=Manual 4=Disabled -->
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                      </ValueExpression>
                      <Operator>NotEqual</Operator>
                      <ValueExpression>
                        <Value Type="Integer">4</Value>
                        <!-- 0=Unknown 1=Stopped 2=StartPending 3=StopPending 4=Running 5=ContinuePending 6=PausePending 7=Paused 8=ServiceNotFound 9=ServerNotFound -->
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </And>
              </Expression>
              <SuppressionSettings>
                <MatchCount>$Config/Samples$</MatchCount>
              </SuppressionSettings>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="Running">
              <Node ID="ServiceRunning">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="NotRunning">
              <Node ID="ServiceNotRunning">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="Running">
              <Node ID="ServiceRunning">
                <Node ID="Probe" />
              </Node>
            </OnDemandDetection>
            <OnDemandDetection MonitorTypeStateID="NotRunning">
              <Node ID="ServiceNotRunning">
                <Node ID="Probe" />
              </Node>
            </OnDemandDetection>
          </OnDemandDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Monitoring>
    <Discoveries>
      <Discovery ID="Proactive.DFS.Watcher.Monitoring.Class.Discovery" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="DFS.Watcher.Monitoring.Seed.Class" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Proactive.DFS.Watcher.Monitoring.Class.Discovery.DS">
          <IntervalSeconds>86333</IntervalSeconds>
          <SyncTime />
          <TimeoutSeconds>120</TimeoutSeconds>
          <DebugLogging>false</DebugLogging>
          <FilePath>D:\scripts\powershell\DFSR\Home_Logs</FilePath>
        </DataSource>
      </Discovery>
      <Discovery ID="DFS.FileServices.Group.Discovery" Enabled="true" Target="DFS.FileServices.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="MSIL!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="GroupPopulationDataSource" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="DFS.FileServices.Group"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Computer"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <Property>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Property>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>(?i)##DFSServerNamingConvention##</Pattern>
                </RegExExpression>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="DFS.FileServices.Script.Group.Discovery" Enabled="true" Target="DFS.FileServices.Script.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="MSIL!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="GroupPopulationDataSource" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="DFS.FileServices.Script.Group"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Computer"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <Property>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Property>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>(?i)##DFSServerNamingConvention##</Pattern>
                </RegExExpression>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
    </Discoveries>
    <Rules>
      <Rule ID="Proactive.DailyTasks.DFSAlerts.Close.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.DailyTasks.DFSAlerts.Close.Script.DataSource">
            <TimeoutSeconds>2100</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.DFSAlerts.Close.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.DFSAlerts.Report.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.DailyTasks.DFSAlerts.Report.Script.DataSource">
            <TimeoutSeconds>2100</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.DFSAlerts.Report.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.DFSAlerts.Close.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">545</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>DFS Alert report</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.DFSAlerts.Close.Script.Task.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.DFSAlerts.Report.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">545</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Windows DFS File Services alerts for FileServices DFS task for</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.DFSAlerts.Report.Script.Task.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.Over50K.Script.Alert.Rule" Enabled="true" Target="DFS.Watcher.Monitoring.Seed.Class" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">546</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>DFSR backlog file count over 50k in past </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.Over50K.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTOver3K.Script.Alert.Rule" Enabled="true" Target="DFS.Watcher.Monitoring.Seed.Class" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">546</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>PST DFSR backlog file count over 3k in past </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTOver3K.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.NOOutput.Script.Alert.Rule" Enabled="true" Target="DFS.Watcher.Monitoring.Seed.Class" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">546</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>NO DFSR backlog check script output files in past </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.NOOutput.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTNOOutput.Script.Alert.Rule" Enabled="true" Target="DFS.Watcher.Monitoring.Seed.Class" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">546</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>NO PST DFSR backlog check script output files in past </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTNOOutput.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.Blank.Script.Alert.Rule" Enabled="true" Target="DFS.Watcher.Monitoring.Seed.Class" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">546</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>DFSR backlog script blank indicating replication broken</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.Blank.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTBlank.Script.Alert.Rule" Enabled="true" Target="DFS.Watcher.Monitoring.Seed.Class" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">546</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>PST DFSR backlog script blank indicating replication broken</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTBlank.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.NULL.Script.Alert.Rule" Enabled="true" Target="DFS.Watcher.Monitoring.Seed.Class" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">546</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>DFSR backlog file count null in past </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.NULL.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTNULL.Script.Alert.Rule" Enabled="true" Target="DFS.Watcher.Monitoring.Seed.Class" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">546</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>PST DFSR backlog file count null in past </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTNULL.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.ServiceNotFound.Recovery.Rule" Enabled="true" Target="MWFDN2!Microsoft.Windows.FileServer.DFSN.10.0.Service" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3751</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>dfs</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.ServiceNotFound.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.ServiceFoundRunning.Recovery.Rule" Enabled="true" Target="MWFDN2!Microsoft.Windows.FileServer.DFSN.10.0.Service" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3752</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>dfs</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.ServiceFoundRunning.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.ServiceRecoveryFailed.Recovery.Rule" Enabled="true" Target="MWFDN2!Microsoft.Windows.FileServer.DFSN.10.0.Service" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3753</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>dfs</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.ServiceRecoveryFailed.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.TooManyRecoveryAttempts.Recovery.Rule" Enabled="true" Target="MWFDN2!Microsoft.Windows.FileServer.DFSN.10.0.Service" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3754</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>dfs</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.ServiceNotFound.Recovery.Rule" Enabled="true" Target="MWFDR2!Microsoft.Windows.FileServer.DFSR.10.0.Service" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3751</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>dfsr</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.ServiceNotFound.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.ServiceFoundRunning.Recovery.Rule" Enabled="true" Target="MWFDR2!Microsoft.Windows.FileServer.DFSR.10.0.Service" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3752</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>dfsr</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.ServiceFoundRunning.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.ServiceRecoveryFailed.Recovery.Rule" Enabled="true" Target="MWFDR2!Microsoft.Windows.FileServer.DFSR.10.0.Service" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3753</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>dfsr</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.ServiceRecoveryFailed.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.TooManyRecoveryAttempts.Recovery.Rule" Enabled="true" Target="MWFDR2!Microsoft.Windows.FileServer.DFSR.10.0.Service" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3754</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>dfsr</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.ServiceNotFound.Recovery.Rule" Enabled="true" Target="MWFF!Microsoft.Windows.FileServices.Service.FCI.10.0" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3751</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>SmSvc</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.ServiceNotFound.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.ServiceFoundRunning.Recovery.Rule" Enabled="true" Target="MWFF!Microsoft.Windows.FileServices.Service.FCI.10.0" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3752</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>SmSvc</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.ServiceFoundRunning.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.ServiceRecoveryFailed.Recovery.Rule" Enabled="true" Target="MWFF!Microsoft.Windows.FileServices.Service.FCI.10.0" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3753</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>SmSvc</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.ServiceRecoveryFailed.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.TooManyRecoveryAttempts.Recovery.Rule" Enabled="true" Target="MWFF!Microsoft.Windows.FileServices.Service.FCI.10.0" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3754</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>SmSvc</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
    </Rules>
    <Tasks>
      <Task ID="Proactive.DailyTasks.DFSAlerts.Close.Script.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.DailyTasks.DFSAlerts.Close.Script.Alert.WA">
          <TimeoutSeconds>2100</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Proactive.DailyTasks.DFSAlerts.Report.Script.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.DailyTasks.DFSAlerts.Report.Script.Alert.WA">
          <TimeoutSeconds>900</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.Script.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.DFSR.ReplicationAndBacklog.Watcher.Script.Alert.WA">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Task>
    </Tasks>
    <Monitors>
      <UnitMonitor ID="DFS.Replication.2104.Event.InternalDB.ErrorEvent.Addendum.Monitor" Accessibility="Public" Enabled="true" Target="MWFDRL!Microsoft.Windows.FileServer.DFSR.ReplicationGroupMember" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Proactive.DFSR.Repeated.Event.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="DFS.Replication.2104.Event.InternalDB.ErrorEvent.Addendum.Monitor.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>High</AlertPriority>
          <AlertSeverity>Error</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Context/DataItem/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="DFS.Replication.2104.Event.InternalDB.ErrorEvent.Addendum.Monitor.Timer" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
          <OperationalState ID="DFS.Replication.2104.Event.InternalDB.ErrorEvent.Addendum.Monitor.Repeated" MonitorTypeStateID="RepeatedEventRaised" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <LogName>DFS Replication</LogName>
          <ErrorExpression>
            <And>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="UnsignedInteger">2104</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">PublisherName</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">DFSR</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">EventDescription</XPathQuery>
                  </ValueExpression>
                  <Operator>ContainsSubstring</Operator>
                  <Pattern>Internal database error</Pattern>
                </RegExExpression>
              </Expression>
            </And>
          </ErrorExpression>
          <AutoResolveInterval>7200</AutoResolveInterval>
          <TimerWindowInSeconds>7200</TimerWindowInSeconds>
          <RepeatCount>2</RepeatCount>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Proactive.DFSR.ReplicationAndBacklog.Monitor" Accessibility="Public" Enabled="false" Target="MWFDRL!Microsoft.Windows.FileServer.DFSR.ReplicationGroupMember" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Proactive.DFS.ReplicationAndBacklog.DataSource.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Proactive.DFSR.ReplicationAndBacklog.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="GoodCondition" MonitorTypeStateID="GoodCondition" HealthState="Success" />
          <OperationalState ID="BadCondition" MonitorTypeStateID="BadCondition" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>3600</IntervalSeconds>
          <SyncTime />
          <TimeoutSeconds>120</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Proactive.DFSR.ReplicationAndBacklog.Watcher.Monitor" Accessibility="Public" Enabled="false" Target="DFS.Watcher.Monitoring.Seed.Class" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Proactive.DFS.ReplicationAndBacklog.Watcher.DataSource.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Proactive.DFSR.ReplicationAndBacklog.Watcher.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="GoodCondition" MonitorTypeStateID="GoodCondition" HealthState="Success" />
          <OperationalState ID="BadCondition" MonitorTypeStateID="BadCondition" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>14400</IntervalSeconds>
          <SyncTime />
          <TimeoutSeconds>120</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Proactive.DFSR.5002.Event.Partner.Communication.Failure.Monitor" Accessibility="Public" Enabled="true" Target="MWFDRL!Microsoft.Windows.FileServer.DFSR.ReplicationGroupMember" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Proactive.DFSR.Repeated.Event.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Proactive.DFSR.5002.Event.Partner.Communication.Failure.Monitor.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>High</AlertPriority>
          <AlertSeverity>Error</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Context/DataItem/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Proactive.DFSR.5002.Event.Partner.Communication.Failure.Monitor.Timer" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
          <OperationalState ID="Proactive.DFSR.5002.Event.Partner.Communication.Failure.Monitor.Repeated" MonitorTypeStateID="RepeatedEventRaised" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <LogName>DFS Replication</LogName>
          <ErrorExpression>
            <And>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="UnsignedInteger">5002</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">PublisherName</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">DFSR</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">EventDescription</XPathQuery>
                  </ValueExpression>
                  <Operator>ContainsSubstring</Operator>
                  <Pattern>DFS Replication service encountered an error communicating with partner</Pattern>
                </RegExExpression>
              </Expression>
            </And>
          </ErrorExpression>
          <AutoResolveInterval>3600</AutoResolveInterval>
          <TimerWindowInSeconds>3600</TimerWindowInSeconds>
          <RepeatCount>7</RepeatCount>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Proactive.DFSR.5008.Event.Partner.NotReachable.Monitor" Accessibility="Public" Enabled="true" Target="MWFDRL!Microsoft.Windows.FileServer.DFSR.ReplicationGroupMember" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Proactive.DFSR.Repeated.Event.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Proactive.DFSR.5008.Event.Partner.NotReachable.Monitor.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>High</AlertPriority>
          <AlertSeverity>Error</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Context/DataItem/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Proactive.DFSR.5008.Event.Partner.NotReachable.Monitor.Timer" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
          <OperationalState ID="Proactive.DFSR.5008.Event.Partner.NotReachable.Monitor.Repeated" MonitorTypeStateID="RepeatedEventRaised" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <LogName>DFS Replication</LogName>
          <ErrorExpression>
            <And>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="UnsignedInteger">5008</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">PublisherName</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">DFSR</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">EventDescription</XPathQuery>
                  </ValueExpression>
                  <Operator>ContainsSubstring</Operator>
                  <Pattern>DFS Replication service failed to communicate with partner</Pattern>
                </RegExExpression>
              </Expression>
            </And>
          </ErrorExpression>
          <AutoResolveInterval>3600</AutoResolveInterval>
          <TimerWindowInSeconds>3600</TimerWindowInSeconds>
          <RepeatCount>2</RepeatCount>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Microsoft.Windows.FileServer.DFSR.10.0.Service.AvailabilityState.Monitor" Accessibility="Public" Enabled="true" Target="MWFDR2!Microsoft.Windows.FileServer.DFSR.10.0.Service" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Proactive.DFS.Service.Monitor.MonitorType" ConfirmDelivery="true">
        <Category>ConfigurationHealth</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.FileServer.DFSR.10.0.Service.AvailabilityState.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>Warning</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='Name']$</AlertParameter1>
            <AlertParameter2>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</AlertParameter2>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Running" MonitorTypeStateID="Running" HealthState="Success" />
          <OperationalState ID="NotRunning" MonitorTypeStateID="NotRunning" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <ComputerName />
          <ServiceName>dfsr</ServiceName>
          <IntervalSeconds>300</IntervalSeconds>
          <CheckStartupType>true</CheckStartupType>
          <Samples>2</Samples>
        </Configuration>
      </UnitMonitor>
    </Monitors>
    <Recoveries>
      <Recovery ID="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.Recovery" Accessibility="Public" Enabled="true" Target="MWFDN2!Microsoft.Windows.FileServer.DFSN.10.0.Service" Monitor="MWFDN2!Microsoft.Windows.FileServer.DFSN.10.0.Service.AvailabilityState" ResetMonitor="true" ExecuteOnState="Error" Remotable="true" Timeout="300">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
          <ScriptName>Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.Recovery.v10037.ps1</ScriptName>
          <ScriptBody>
#=================================================================================
#  Script to restart a service
#
#  Author:  Kevin Holman
#
#  Version:  1.0
#
#=================================================================================


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $ServiceName = "dfs"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging
$ScriptName = "Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.Recovery.v10037.ps1"
$EventID = "3750"
#=================================================================================


# Starting Script section
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#=================================================================================


# Begin MAIN script section
#=================================================================================

[string]$ServiceName = "dfs"

#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Recovery script for service: ($ServiceName) is starting. `n Running as ($whoami).")
write-host "Recovery script for service: ($ServiceName) is starting. Running as ($whoami)."

#Get the service object
$Svc = Get-Service $ServiceName

#Check to ensure the service exists:
IF (!$Svc)
{
  $momapi.LogScriptEvent($ScriptName,3751,2, "`n Service ($ServiceName) was not found on this computer. `n This indicates a misconfiguration of the monitor. `n Error is ($error)")
  write-host "Service ($ServiceName) was not found on this computer. This indicates a misconfiguration of the monitor. Error is ($error)"
  EXIT
}

#Get Service Status:
[string]$SvcStatus = $Svc.Status

#Do not continue is service is already running
IF ($SvcStatus -eq "Running")
{
  $momapi.LogScriptEvent($ScriptName,3752,2, "`n Service ($ServiceName) was found to be in the Running state. `n This indicates a misconfiguration of the monitor. `n No recovery action will be taken.")
  write-host "Service ($ServiceName) was found to be in the Running state. This indicates a misconfiguration of the monitor. No recovery action will be taken."
  EXIT  
}

#Log recovery information event
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) was found to be in the ($SvcStatus) state.  Recovery will be attempted.")
write-host "Service: ($ServiceName) was found to be in the ($SvcStatus) state.  Recovery will be attempted."

#Attempt First Recovery
#Restart-Service -Name $ServiceName -Force
get-Service -Name $ServiceName | start-service
#Wait time in seconds
Start-Sleep 20
#Get the service object
$Svc = Get-Service $ServiceName
#Get Service Status:
$SvcStatus = $Svc.Status

IF ($SvcStatus -ne "Running")
{
  #Attempt Second Recovery
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) second attempt at recovering starting now.")
  write-host "Service: ($ServiceName) second attempt at recovering starting now."  
  #Restart-Service -Name $ServiceName -Force
	get-Service -Name $ServiceName | start-service
  Start-Sleep 20
  $Svc = Get-Service $ServiceName
  $SvcStatus = $Svc.Status 
}

IF ($SvcStatus -ne "Running")
{
  #Attempt Third Recovery
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) third attempt at recovering starting now.")
  write-host "Service: ($ServiceName) third attempt at recovering starting now."    
  #Restart-Service -Name $ServiceName -Force
	get-Service -Name $ServiceName | start-service
  Start-Sleep 20
  $Svc = Get-Service $ServiceName
  $SvcStatus = $Svc.Status 
}

IF ($SvcStatus -eq "Running")
{
  #Log event of a successful restart
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) was successfully restarted and then detected to be in the Running state.")
  write-host "Service: ($ServiceName) was successfully restarted and then detected to be in the Running state."
}
ELSE
{
  #Log event of a successful restart
  $momapi.LogScriptEvent($ScriptName,3753,2,"`n Service: ($ServiceName) is not running. `n Recovery was attempted and failed. `n Manual intervention is required. `n The last detected service status was ($SvcStatus).") 
  write-host "Service: ($ServiceName) is not running. Recovery was attempted and failed. Manual intervention is required. The last detected service status was ($SvcStatus)."
}

# Check to see if this recovery script has been run multiple times in the last x minutes for detection of too many recovery actions
$Message = "*($ServiceName) is starting*"
$Events = Get-EventLog -LogName 'Operations Manager' -After $StartTime.AddMinutes(-60) -Message $Message | where {$_.EventID -eq 3750}
$EventCount = $Events.Count
IF ($EventCount -ge 3)
{
  $momapi.LogScriptEvent($ScriptName,3754,2,"`n Too many service recoveries have been attempted for ($ServiceName). `n ($EventCount) recoveries are detected in the event log. `n Manual intervention is required.")
  write-host "Too many service recoveries have been attempted for ($ServiceName). ($EventCount) recoveries are detected in the event log. Manual intervention is required."
}

# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
write-host "Script Completed. Script Runtime: ($ScriptTime) seconds."
#=================================================================================
# End of script		  
		  </ScriptBody>
          <TimeoutSeconds>240</TimeoutSeconds>
        </WriteAction>
      </Recovery>
      <Recovery ID="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.Recovery" Accessibility="Public" Enabled="true" Target="MWFDR2!Microsoft.Windows.FileServer.DFSR.10.0.Service" Monitor="Microsoft.Windows.FileServer.DFSR.10.0.Service.AvailabilityState.Monitor" ResetMonitor="true" ExecuteOnState="Error" Remotable="true" Timeout="300">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
          <ScriptName>Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.Recovery.v10037.ps1</ScriptName>
          <ScriptBody>
#=================================================================================
#  Script to restart a service
#
#  Author:  Kevin Holman
#
#  Version:  1.0
#
#=================================================================================


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $ServiceName = "dfsr"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging
$ScriptName = "Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.Recovery.v10037.ps1"
$EventID = "3750"
#=================================================================================


# Starting Script section
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#=================================================================================


# Begin MAIN script section
#=================================================================================

[string]$ServiceName = "dfsr"

#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Recovery script for service: ($ServiceName) is starting. `n Running as ($whoami).")
write-host "Recovery script for service: ($ServiceName) is starting. Running as ($whoami)."

#Get the service object
$Svc = Get-Service $ServiceName

#Check to ensure the service exists:
IF (!$Svc)
{
  $momapi.LogScriptEvent($ScriptName,3751,2, "`n Service ($ServiceName) was not found on this computer. `n This indicates a misconfiguration of the monitor. `n Error is ($error)")
  write-host "Service ($ServiceName) was not found on this computer. This indicates a misconfiguration of the monitor. Error is ($error)"
  EXIT
}

#Get Service Status:
[string]$SvcStatus = $Svc.Status

#Do not continue is service is already running
IF ($SvcStatus -eq "Running")
{
  $momapi.LogScriptEvent($ScriptName,3752,2, "`n Service ($ServiceName) was found to be in the Running state. `n This indicates a misconfiguration of the monitor. `n No recovery action will be taken.")
  write-host "Service ($ServiceName) was found to be in the Running state. This indicates a misconfiguration of the monitor. No recovery action will be taken."
  EXIT  
}

#Log recovery information event
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) was found to be in the ($SvcStatus) state.  Recovery will be attempted.")
write-host "Service: ($ServiceName) was found to be in the ($SvcStatus) state.  Recovery will be attempted."

#Attempt First Recovery
#Restart-Service -Name $ServiceName -Force
get-Service -Name $ServiceName | start-service
#Wait time in seconds
Start-Sleep 20
#Get the service object
$Svc = Get-Service $ServiceName
#Get Service Status:
$SvcStatus = $Svc.Status

IF ($SvcStatus -ne "Running")
{
  #Attempt Second Recovery
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) second attempt at recovering starting now.")
  write-host "Service: ($ServiceName) second attempt at recovering starting now."  
  #Restart-Service -Name $ServiceName -Force
	get-Service -Name $ServiceName | start-service
  Start-Sleep 20
  $Svc = Get-Service $ServiceName
  $SvcStatus = $Svc.Status 
}

IF ($SvcStatus -ne "Running")
{
  #Attempt Third Recovery
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) third attempt at recovering starting now.")
  write-host "Service: ($ServiceName) third attempt at recovering starting now."    
  #Restart-Service -Name $ServiceName -Force
	get-Service -Name $ServiceName | start-service
  Start-Sleep 20
  $Svc = Get-Service $ServiceName
  $SvcStatus = $Svc.Status 
}

IF ($SvcStatus -eq "Running")
{
  #Log event of a successful restart
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) was successfully restarted and then detected to be in the Running state.")
  write-host "Service: ($ServiceName) was successfully restarted and then detected to be in the Running state."
}
ELSE
{
  #Log event of a successful restart
  $momapi.LogScriptEvent($ScriptName,3753,2,"`n Service: ($ServiceName) is not running. `n Recovery was attempted and failed. `n Manual intervention is required. `n The last detected service status was ($SvcStatus).") 
  write-host "Service: ($ServiceName) is not running. Recovery was attempted and failed. Manual intervention is required. The last detected service status was ($SvcStatus)."
}

# Check to see if this recovery script has been run multiple times in the last x minutes for detection of too many recovery actions
$Message = "*($ServiceName) is starting*"
$Events = Get-EventLog -LogName 'Operations Manager' -After $StartTime.AddMinutes(-60) -Message $Message | where {$_.EventID -eq 3750}
$EventCount = $Events.Count
IF ($EventCount -ge 3)
{
  $momapi.LogScriptEvent($ScriptName,3754,2,"`n Too many service recoveries have been attempted for ($ServiceName). `n ($EventCount) recoveries are detected in the event log. `n Manual intervention is required.")
  write-host "Too many service recoveries have been attempted for ($ServiceName). ($EventCount) recoveries are detected in the event log. Manual intervention is required."
}

# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
write-host "Script Completed. Script Runtime: ($ScriptTime) seconds."
#=================================================================================
# End of script		  
		  </ScriptBody>
          <TimeoutSeconds>240</TimeoutSeconds>
        </WriteAction>
      </Recovery>
      <Recovery ID="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.Recovery" Accessibility="Public" Enabled="true" Target="MWFF!Microsoft.Windows.FileServices.Service.FCI.10.0" Monitor="MWFF!Microsoft.Windows.FileServices.Service.FCI.Service" ResetMonitor="true" ExecuteOnState="Error" Remotable="true" Timeout="300">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
          <ScriptName>Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.Recovery.v10037.ps1</ScriptName>
          <ScriptBody>
#=================================================================================
#  Script to restart a service
#
#  Author:  Kevin Holman
#
#  Version:  1.0
#
#=================================================================================


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $ServiceName = "SmSvc"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging
$ScriptName = "Proactive.Microsoft.Windows.FileServer.SmSVC.10.0.Service.Recovery.v10037.ps1"
$EventID = "3750"
#=================================================================================


# Starting Script section
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#=================================================================================


# Begin MAIN script section
#=================================================================================

[string]$ServiceName = "SmSVC"

#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Recovery script for service: ($ServiceName) is starting. `n Running as ($whoami).")
write-host "Recovery script for service: ($ServiceName) is starting. Running as ($whoami)."

#Get the service object
$Svc = Get-Service $ServiceName

#Check to ensure the service exists:
IF (!$Svc)
{
  $momapi.LogScriptEvent($ScriptName,3751,2, "`n Service ($ServiceName) was not found on this computer. `n This indicates a misconfiguration of the monitor. `n Error is ($error)")
  write-host "Service ($ServiceName) was not found on this computer. This indicates a misconfiguration of the monitor. Error is ($error)"
  EXIT
}

#Get Service Status:
[string]$SvcStatus = $Svc.Status

#Do not continue is service is already running
IF ($SvcStatus -eq "Running")
{
  $momapi.LogScriptEvent($ScriptName,3752,2, "`n Service ($ServiceName) was found to be in the Running state. `n This indicates a misconfiguration of the monitor. `n No recovery action will be taken.")
  write-host "Service ($ServiceName) was found to be in the Running state. This indicates a misconfiguration of the monitor. No recovery action will be taken."
  EXIT  
}

#Log recovery information event
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) was found to be in the ($SvcStatus) state.  Recovery will be attempted.")
write-host "Service: ($ServiceName) was found to be in the ($SvcStatus) state.  Recovery will be attempted."

#Attempt First Recovery
#Restart-Service -Name $ServiceName -Force
get-Service -Name $ServiceName | start-service
#Wait time in seconds
Start-Sleep 20
#Get the service object
$Svc = Get-Service $ServiceName
#Get Service Status:
$SvcStatus = $Svc.Status

IF ($SvcStatus -ne "Running")
{
  #Attempt Second Recovery
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) second attempt at recovering starting now.")
  write-host "Service: ($ServiceName) second attempt at recovering starting now."  
  #Restart-Service -Name $ServiceName -Force
	get-Service -Name $ServiceName | start-service
  Start-Sleep 20
  $Svc = Get-Service $ServiceName
  $SvcStatus = $Svc.Status 
}

IF ($SvcStatus -ne "Running")
{
  #Attempt Third Recovery
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) third attempt at recovering starting now.")
  write-host "Service: ($ServiceName) third attempt at recovering starting now."    
  #Restart-Service -Name $ServiceName -Force
	get-Service -Name $ServiceName | start-service
  Start-Sleep 20
  $Svc = Get-Service $ServiceName
  $SvcStatus = $Svc.Status 
}

IF ($SvcStatus -eq "Running")
{
  #Log event of a successful restart
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) was successfully restarted and then detected to be in the Running state.")
  write-host "Service: ($ServiceName) was successfully restarted and then detected to be in the Running state."
}
ELSE
{
  #Log event of a successful restart
  $momapi.LogScriptEvent($ScriptName,3753,2,"`n Service: ($ServiceName) is not running. `n Recovery was attempted and failed. `n Manual intervention is required. `n The last detected service status was ($SvcStatus).") 
  write-host "Service: ($ServiceName) is not running. Recovery was attempted and failed. Manual intervention is required. The last detected service status was ($SvcStatus)."
}

# Check to see if this recovery script has been run multiple times in the last x minutes for detection of too many recovery actions
$Message = "*($ServiceName) is starting*"
$Events = Get-EventLog -LogName 'Operations Manager' -After $StartTime.AddMinutes(-60) -Message $Message | where {$_.EventID -eq 3750}
$EventCount = $Events.Count
IF ($EventCount -ge 3)
{
  $momapi.LogScriptEvent($ScriptName,3754,2,"`n Too many service recoveries have been attempted for ($ServiceName). `n ($EventCount) recoveries are detected in the event log. `n Manual intervention is required.")
  write-host "Too many service recoveries have been attempted for ($ServiceName). ($EventCount) recoveries are detected in the event log. Manual intervention is required."
}

# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
write-host "Script Completed. Script Runtime: ($ScriptTime) seconds."
#=================================================================================
# End of script		  
		  </ScriptBody>
          <TimeoutSeconds>240</TimeoutSeconds>
        </WriteAction>
      </Recovery>
    </Recoveries>
    <Overrides>
      <DiscoveryConfigurationOverride ID="Override.Interval.Microsoft.Windows.FileServer.DFSR.Backlog.Discovery.for.Microsoft.Windows.DFSR.Service.Discovery" Context="MWFDRL!Microsoft.Windows.FileServer.DFSR.Service" Enforced="false" Discovery="MWFDRL!Microsoft.Windows.FileServer.DFSR.BacklogDiscovery" Parameter="IntervalSeconds" Module="DS">
        <Value>14400</Value>
      </DiscoveryConfigurationOverride>
      <DiscoveryConfigurationOverride ID="Override.Interval.Microsoft.Windows.FileServer.DFSN.Namespace.Discovery.for.Microsoft.Windows.DFSN.Root.Target.Discovery" Context="MWFDNL!Microsoft.Windows.FileServer.DFSN.RootTarget" Enforced="false" Discovery="MWFDNL!Microsoft.Windows.FileServer.DFSN.NamespaceLinksDiscovery" Parameter="IntervalSeconds" Module="DS">
        <Value>43200</Value>
      </DiscoveryConfigurationOverride>
      <DiscoveryConfigurationOverride ID="Override.DFSUtilPath.Microsoft.Windows.FileServer.DFSN.Namespace.Discovery.for.Microsoft.Windows.DFSN.Role.Service.Discovery" Context="MWFDN2!Microsoft.Windows.FileServer.DFSN.10.0.RoleService" Enforced="false" Discovery="MWFDN2!Microsoft.Windows.FileServer.DFSN.10.0.NamespaceDiscovery" Parameter="DfsutilPath" Module="DS">
        <Value>%SYSTEMROOT%\System32</Value>
      </DiscoveryConfigurationOverride>
      <DiscoveryConfigurationOverride ID="Override.Interval.Microsoft.Windows.FileServer.DFSN.Namespace.Discovery.for.Microsoft.Windows.DFSN.Role.Service.Discovery" Context="MWFDN2!Microsoft.Windows.FileServer.DFSN.10.0.RoleService" Enforced="false" Discovery="MWFDN2!Microsoft.Windows.FileServer.DFSN.10.0.NamespaceDiscovery" Parameter="IntervalSeconds" Module="DS">
        <Value>43200</Value>
      </DiscoveryConfigurationOverride>
      <DiscoveryConfigurationOverride ID="Override.Timeout.Microsoft.Windows.FileServer.DFSN.Namespace.Discovery.for.Microsoft.Windows.DFSN.Role.Service.Discovery" Context="MWFDN2!Microsoft.Windows.FileServer.DFSN.10.0.RoleService" Enforced="false" Discovery="MWFDN2!Microsoft.Windows.FileServer.DFSN.10.0.NamespaceDiscovery" Parameter="TimeoutSeconds" Module="DS">
        <Value>900</Value>
      </DiscoveryConfigurationOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.FileServer.DFSN.DFSClient.Discovery.for.Windows.Computer.Discovery" Context="Windows!Microsoft.Windows.Computer" Enforced="false" Discovery="MWFDNL!Microsoft.Windows.FileServer.DFSN.DfsClientDiscovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.FileServer.DFSN.DFSClient.Discovery.for.DFS.FileServices.Group.Discovery" Context="DFS.FileServices.Group" ContextInstance="baa5b0e7-dc9d-3761-2714-c325a9b99994" Enforced="false" Discovery="MWFDNL!Microsoft.Windows.FileServer.DFSN.DfsClientDiscovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.FileServer.DFSR.Server.Discovery.for.Microsoft.Windows.Server.Computer.Discovery" Context="MWS2D!Microsoft.Windows.Server.10.0.Computer" Enforced="false" Discovery="MWFDR2!Microsoft.Windows.FileServer.DFSR.10.0.DFSRServerDiscovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.FileServer.DFSR.Server.Discovery.for.Microsoft.Windows.Server.DFSR.Server.Discovery.forDFS.FileServicesGroup.Discovery" Context="DFS.FileServices.Group" ContextInstance="baa5b0e7-dc9d-3761-2714-c325a9b99994" Enforced="false" Discovery="MWFDR2!Microsoft.Windows.FileServer.DFSR.10.0.DFSRServerDiscovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.FileServer.DFSN.Role.Service.Discovery.for.Microsoft.Windows.Server.Computer.Discovery" Context="MWS2D!Microsoft.Windows.Server.10.0.Computer" Enforced="false" Discovery="MWFDN2!Microsoft.Windows.FileServer.DFSN.10.0.RoleServiceDiscovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.FileServer.DFSN.Role.Service.Discovery.for.DFS.FileServices.Group.Discovery" Context="DFS.FileServices.Group" ContextInstance="baa5b0e7-dc9d-3761-2714-c325a9b99994" Enforced="false" Discovery="MWFDN2!Microsoft.Windows.FileServer.DFSN.10.0.RoleServiceDiscovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.FileServer.DFSR.Backlog.Discovery.for.Microsoft.Windows.DFSR.Service.Discovery" Context="MWFDRL!Microsoft.Windows.FileServer.DFSR.Service" Enforced="false" Discovery="MWFDRL!Microsoft.Windows.FileServer.DFSR.BacklogDiscovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Enable.Microsoft.Windows.FileServer.DFSN.Namespace.Discovery.for.Microsoft.Windows.DFSN.Root.Target.Discovery" Context="MWFDNL!Microsoft.Windows.FileServer.DFSN.RootTarget" Enforced="false" Discovery="MWFDNL!Microsoft.Windows.FileServer.DFSN.NamespaceLinksDiscovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Enable.Microsoft.Windows.FileServer.DFSN.Namespace.Discovery.for.Microsoft.Windows.DFSN.Role.Service.Discovery" Context="MWFDN2!Microsoft.Windows.FileServer.DFSN.10.0.RoleService" Enforced="false" Discovery="MWFDN2!Microsoft.Windows.FileServer.DFSN.10.0.NamespaceDiscovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <MonitorPropertyOverride ID="Override.Severity.Microsoft.Windows.FileServices.Service.Deduplication.10.0.VolumeOptimizationRollup" Context="MWFD6!Microsoft.Windows.FileServices.Service.Deduplication.10.0" Enforced="false" Monitor="MWFD6!Microsoft.Windows.FileServices.Service.Deduplication.10.0.VolumeOptimizationRollup" Property="AlertSeverity">
        <Value>Warning</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Override.Severity.Microsoft.Windows.FileServices.Service.FCI.ADPropertySync" Context="MWFF!Microsoft.Windows.FileServices.Service.FCI.10.0" Enforced="false" Monitor="MWFF!Microsoft.Windows.FileServices.Service.FCI.ADPropertySync" Property="AlertSeverity">
        <Value>Warning</Value>
      </MonitorPropertyOverride>
      <RuleConfigurationOverride ID="Override.Severity.Microsoft.Windows.FileServices.Service.Deduplication.10.0.CorruptionsFound" Context="MWFD6!Microsoft.Windows.FileServices.Service.Deduplication.10.0.Volume" Enforced="false" Rule="MWFD6!Microsoft.Windows.FileServices.Service.Deduplication.10.0.CorruptionsFound" Parameter="Severity" Module="GenerateAlert">
        <Value>1</Value>
      </RuleConfigurationOverride>
    </Overrides>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="DFS.Replication.2104.Event.InternalDB.ErrorEvent.Addendum.Monitor.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.DFSAlerts.Close.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.DFSAlerts.Close.Script.Task.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.DFSAlerts.Report.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.DFSAlerts.Report.Script.Task.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.Over50K.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTOver3K.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.NOOutput.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTNOOutput.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.Blank.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTBlank.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.NULL.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTNULL.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DFSR.ReplicationAndBacklog.Monitor.AlertMessage" />
      <StringResource ID="Proactive.DFSR.ReplicationAndBacklog.Watcher.Monitor.AlertMessage" />
      <StringResource ID="Proactive.DFSR.5002.Event.Partner.Communication.Failure.Monitor.AlertMessage" />
      <StringResource ID="Proactive.DFSR.5008.Event.Partner.NotReachable.Monitor.AlertMessage" />
      <StringResource ID="Microsoft.Windows.FileServer.DFSR.10.0.Service.AvailabilityState.Monitor.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.Script.Task.Rule.AlertMessage" />
      <StringResource ID="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.ServiceNotFound.Recovery.Rule.AlertMessage" />
      <StringResource ID="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.ServiceFoundRunning.Recovery.Rule.AlertMessage" />
      <StringResource ID="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.ServiceRecoveryFailed.Recovery.Rule.AlertMessage" />
      <StringResource ID="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage" />
      <StringResource ID="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.ServiceNotFound.Recovery.Rule.AlertMessage" />
      <StringResource ID="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.ServiceFoundRunning.Recovery.Rule.AlertMessage" />
      <StringResource ID="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.ServiceRecoveryFailed.Recovery.Rule.AlertMessage" />
      <StringResource ID="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage" />
      <StringResource ID="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.ServiceNotFound.Recovery.Rule.AlertMessage" />
      <StringResource ID="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.ServiceFoundRunning.Recovery.Rule.AlertMessage" />
      <StringResource ID="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.ServiceRecoveryFailed.Recovery.Rule.AlertMessage" />
      <StringResource ID="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="false">
      <DisplayStrings>
        <DisplayString ElementID="Microsoft.Windows.Server.FileServices.2016.Addendum">
          <Name>Microsoft Windows Server File Services 2016 DFS Addendum</Name>
          <Description>
v1.0.3.7   7 Nov 2024 Disabled DFSR backlog monitors
v1.0.3.6   4 Jan 2024 Resolution State logic improvements for large environments
v1.0.3.5  21 Dec 2023 Updated Rule closure logic, whitespace audit
v1.0.3.2  11 Dec 2023 Massive change in reset monitor logic, reducing runtime gt 92%, allows Age calculation before reset
v1.0.3.1  30 Nov 2023 Removed debug detail from DS/WA which showed in Health Explorer pane
v1.0.3.0  18 Jul 2023 Updates to report and closure DS timing
v1.0.2.8  12 Jul 2023 DFS Close and Report scripts updated, timing to spread out runtimes on SCOM MS
v1.0.2.6  28 Jun 2023 Close automation update DS and WA for comments, Recovery DisplayStrings
v1.0.2.1  15 Jul 2022 DFSR DFSN SmSvc recovery, various report updates
v1.0.1.7   2 Jun 2022 Updates for report, cleanup DS,WA,Tasks,timeouts
v1.0.1.6   9 May 2022 DFS recovery task
v1.0.1.5   6 Apr 2022 Updated 5002,5008 alert messages, reorganized displayStrings
v1.0.0.14 17 Mar 2022 Updated watcher script - DFS variables
v1.0.0.12 16 Mar 2022 Updated backlog datasources for null data scenario, 5002 and 5008 repeat event monitors
v1.0.0.9  16 Apr 2021 Updated report to remove auto-closed monitors, adjusted group regexv1
v1.0.0.7  29 Mar 2021 Updated Backlog and customer specific script alerting
v1.0.0.6  19 Mar 2021 Added DFS monitors, DFSR run as for backlog, included Replication group member monitor, updated scripts, task names
v1.0.0.0  23 Feb 2021 Created Addendum for DFSR monitoring</Description>
        </DisplayString>
        <DisplayString ElementID="DFS.Watcher.Monitoring.Seed.Class">
          <Name>DFS Watcher Monitoring Seed Class</Name>
          <Description>Created 16 Mar 2022 to enable watcher script monitoring</Description>
        </DisplayString>
        <DisplayString ElementID="DFS.FileServices.Group">
          <Name>DFS File Services Group</Name>
          <Description>Created 23 Feb 2021 to only enable discovery for DFSR servers, not the enterprise.</Description>
        </DisplayString>
        <DisplayString ElementID="DFS.FileServices.Script.Group">
          <Name>DFS File Services script Group</Name>
          <Description>This discovery rule populates the group 'DFS File Services'</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.DFSR.ReplicationAndBacklog.Monitor.DataSource">
          <Name>DFS Replication and backlog DataSource</Name>
          <Description>This datasource checks DFS replication and backlog</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFSR.ReplicationAndBacklog.Watcher.Monitor.DataSource">
          <Name>DFSR Replication and backlog Watcher DataSource</Name>
          <Description>This datasource checks secondary script for DFSR replication and backlog</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Close.Script.DataSource">
          <Name>Proactive DailyTasks DFSAlerts report and auto-close DataSource</Name>
          <Description>This datasource generates DFSAlerts report and auto-close DataSource</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Report.Script.DataSource">
          <Name>Proactive DailyTasks DFSAlerts report DataSource</Name>
          <Description>This datasource generates DFSAlerts report DataSource</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.DFSR.ReplicationAndBacklog.Watcher.Script.Alert.WA">
          <Name>Proactive DailyTasks DFSR Replication and backlog watcher script on-demand task</Name>
          <Description>This write-action task generates DFSR alerts based on backlog greater than 50k write-action task</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Close.Script.Alert.WA">
          <Name>Proactive DailyTasks DFSAlerts report and auto-close on-demand task</Name>
          <Description>This write-action task generates DFSAlerts report and auto-close DataSource</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Report.Script.Alert.WA">
          <Name>Proactive DailyTasks DFSAlerts report on-demand task</Name>
          <Description>This write-action task generates DFSAlerts report write-action</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.DFSR.Repeated.Event.MonitorType">
          <Name>Proactive DFS repeated Event MonitorType</Name>
          <Description>This monitor type refers to datasource to run repeat event monitor script logic</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFS.ReplicationAndBacklog.DataSource.MonitorType">
          <Name>Proactive DFS Replication backlog Datasource MonitorType</Name>
          <Description>This monitor type refers to datasource to run replication monitor script logic</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFS.ReplicationAndBacklog.Watcher.DataSource.MonitorType">
          <Name>Proactive DFS Replication Backlog Watcher Datasource MonitorType</Name>
          <Description>This monitor type refers to datasource to check watcher script logic</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFS.Service.Monitor.MonitorType">
          <Name>Proactive DFS Service Monitor MonitorType</Name>
          <Description>This monitor type refers to datasource that adds options service monitor logic</Description>
        </DisplayString>
		
        <DisplayString ElementID="Proactive.DFS.Watcher.Monitoring.Class.Discovery">
          <Name>DFS Watcher Monitoring Seed Servers</Name>
          <Description>Populate DFS Watcher Monitoring class 'DFS Watcher Monitoring Seed Class' discovery</Description>
        </DisplayString>
        <DisplayString ElementID="DFS.FileServices.Group.Discovery">
          <Name>DFS File Services</Name>
          <Description>This discovery rule populates the group 'DFS File Services'</Description>
        </DisplayString>
        <DisplayString ElementID="DFS.FileServices.Script.Group.Discovery">
          <Name>DFS File Services Script servers</Name>
          <Description>This discovery rule populates the group 'DFS File Services Script'</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.FileServer.DFSN.DFSClient.Discovery.for.Windows.Computer.Discovery">
          <Name>NotUsed</Name>
          <Description>Disabled 23 Feb 2021 for DFSR monitoring</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.FileServer.DFSN.DFSClient.Discovery.for.DFS.FileServices.Group.Discovery">
          <Name>NotUsed</Name>
          <Description>Disabled 23 Feb 2021 for DFSR monitoring</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.FileServer.DFSR.Server.Discovery.for.Microsoft.Windows.Server.Computer.Discovery">
          <Name>NotUsed</Name>
          <Description>Disabled 23 Feb 2021 for DFSR monitoring</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.FileServer.DFSR.Server.Discovery.for.Microsoft.Windows.Server.DFSR.Server.Discovery.forDFS.FileServicesGroup.Discovery">
          <Name>NotUsed</Name>
          <Description>Enabled 23 Feb 2021 for DFSR monitoring</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.FileServer.DFSN.Role.Service.Discovery.for.Microsoft.Windows.Server.Computer.Discovery">
          <Name>NotUsed</Name>
          <Description>Disabled 23 Feb 2021 for DFSR monitoring</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.FileServer.DFSN.Role.Service.Discovery.for.DFS.FileServices.Group.Discovery">
          <Name>NotUsed</Name>
          <Description>Enabled 23 Feb 2021 for DFSR monitoring</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Close.Script.Alert.Rule">
          <Name>Proactive DailyTasks DFSAlerts Auto-close cleanup Script Alert Rule</Name>
          <Description>Proactive Scheduled rule to kick off cleanup datasource at 0615 M-F</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Close.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DailyTasks DFSAlerts Auto-close cleanup Script Alert Rule</Name>
          <Description>{1}
		  
{2}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Report.Script.Alert.Rule">
          <Name>Proactive DailyTasks DFSAlerts Auto-close Report Script Alert Rule</Name>
          <Description>Proactive Scheduled rule to kick off datasource at 1002 M-F</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Report.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DailyTasks DFSAlerts Auto-close Report Script Alert Rule</Name>
          <Description>{1}
		  
{2}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.Over50K.Script.Alert.Rule">
          <Name>Proactive DailyTasks DFSR Watcher backlog over 50k Script Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.Over50K.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DailyTasks DFSR Watcher backlog over 50k Script Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTOver3K.Script.Alert.Rule">
          <Name>Proactive DailyTasks DFSR Watcher PST backlog over 3k Script Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTOver3K.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DailyTasks DFSR Watcher PST backlog over 3k Script Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.NOOutput.Script.Alert.Rule">
          <Name>Proactive DailyTasks DFSR Watcher backlog script NO Output Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.NOOutput.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DailyTasks DFSR Watcher backlog script NO Output Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTNOOutput.Script.Alert.Rule">
          <Name>Proactive DailyTasks DFSR Watcher backlog script PST NO Output Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTNOOutput.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DailyTasks DFSR Watcher backlog script PST NO Output Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.Blank.Script.Alert.Rule">
          <Name>Proactive DailyTasks DFSR Watcher backlog script Blank Output Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.Blank.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DailyTasks DFSR Watcher backlog script Blank Output Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTBlank.Script.Alert.Rule">
          <Name>Proactive DailyTasks DFSR Watcher backlog script PST Blank Output Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTBlank.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DailyTasks DFSR Watcher backlog script PST Blank Output Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.NULL.Script.Alert.Rule">
          <Name>Proactive DailyTasks DFSR Watcher backlog script NULL Output Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.NULL.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DailyTasks DFSR Watcher backlog script NULL Output Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTNULL.Script.Alert.Rule">
          <Name>Proactive DailyTasks DFSR Watcher backlog script PST NULL Output Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.PSTNULL.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DailyTasks DFSR Watcher backlog script PST NULL Output Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Close.Script.Task.Alert.Rule">
          <Name>Proactive DailyTasks DFSAlerts AutoClose task Report Manual Task Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Close.Script.Task.Rule.AlertMessage">
          <Name>Proactive DailyTasks DFSAlerts AutoClose Report Script Task Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.ServiceNotFound.Recovery.Rule">
          <Name>Proactive DailyTasks DFSN DFS service ServiceNotFound Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.ServiceNotFound.Recovery.Rule.AlertMessage">
          <Name>Proactive DailyTasks DFSN DFS service ServiceNotFound Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.ServiceFoundRunning.Recovery.Rule">
          <Name>Proactive DailyTasks DFSN DFS service ServiceFoundRunning Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.ServiceFoundRunning.Recovery.Rule.AlertMessage">
          <Name>Proactive DailyTasks DFSN DFS service ServiceFoundRunning Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
		<DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.ServiceRecoveryFailed.Recovery.Rule">
          <Name>Proactive DailyTasks DFSN DFS service RecoveryFailed Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.ServiceRecoveryFailed.Recovery.Rule.AlertMessage">
          <Name>Proactive DailyTasks DFSN DFS service RecoveryFailed Rule Alert</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.TooManyRecoveryAttempts.Recovery.Rule">
          <Name>Proactive DailyTasks DFSN DFS service TooManyRecoveryAttempts Recovery Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage">
          <Name>Proactive DailyTasks DFSN DFS service TooManyRecoveryAttempts Recovery Alert Rule</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.ServiceNotFound.Recovery.Rule">
          <Name>Proactive DailyTasks DFSR DFS service ServiceNotFound Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.ServiceNotFound.Recovery.Rule.AlertMessage">
          <Name>Proactive DailyTasks DFSR DFS service ServiceNotFound Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.ServiceFoundRunning.Recovery.Rule">
          <Name>Proactive DailyTasks DFSR DFS service ServiceFoundRunning Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.ServiceFoundRunning.Recovery.Rule.AlertMessage">
          <Name>Proactive DailyTasks DFSR DFS service ServiceFoundRunning Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.ServiceRecoveryFailed.Recovery.Rule">
          <Name>Proactive DailyTasks DFSR DFS service RecoveryFailed Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.ServiceRecoveryFailed.Recovery.Rule.AlertMessage">
          <Name>Proactive DailyTasks DFSR DFS service RecoveryFailed Rule Alert</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.TooManyRecoveryAttempts.Recovery.Rule">
          <Name>Proactive DailyTasks DFSR DFS service TooManyRecoveryAttempts Recovery Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage">
          <Name>Proactive DailyTasks DFSR DFS service TooManyRecoveryAttempts Recovery Alert Rule</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.ServiceNotFound.Recovery.Rule">
          <Name>Proactive DailyTasks SmSvc DFS service ServiceNotFound Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.ServiceNotFound.Recovery.Rule.AlertMessage">
          <Name>Proactive DailyTasks SmSvc DFS service ServiceNotFound Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.ServiceFoundRunning.Recovery.Rule">
          <Name>Proactive DailyTasks SmSvc DFS service ServiceFoundRunning Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.ServiceFoundRunning.Recovery.Rule.AlertMessage">
          <Name>Proactive DailyTasks SmSvc DFS service ServiceFoundRunning Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.ServiceRecoveryFailed.Recovery.Rule">
          <Name>Proactive DailyTasks SmSvc DFS service RecoveryFailed Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.ServiceRecoveryFailed.Recovery.Rule.AlertMessage">
          <Name>Proactive DailyTasks SmSvc DFS service RecoveryFailed Rule Alert</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.TooManyRecoveryAttempts.Recovery.Rule">
          <Name>Proactive DailyTasks SmSvc DFS service TooManyRecoveryAttempts Recovery has attempted to recover the service too many times Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage">
          <Name>Proactive DailyTasks SmSvc DFS service TooManyRecoveryAttempts Recovery has attempted to recover the service too many times</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Backlog.Watcher.Script.Task">
          <Name>Proactive DailyTasks DFSAlerts AutoClose Report Script Task</Name>
          <Description>Proactive DailyTasks DFSAlerts task to kick off on-demand</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Close.Script.Task">
          <Name>Proactive DailyTasks DFSAlerts Cleanup Script Task</Name>
          <Description>Proactive DailyTasks DFSAlerts Cleanup task to kick off on-demand</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DFSAlerts.Report.Script.Task">
          <Name>Proactive DailyTasks DFSAlerts AutoClose Report Script Task</Name>
          <Description>Proactive DailyTasks DFSAlerts report task to kick off on-demand</Description>
        </DisplayString>

        <DisplayString ElementID="DFS.Replication.2104.Event.InternalDB.ErrorEvent.Addendum.Monitor">
          <Name>DFS-R Replication event 2104 with message contains Internal DB Error Event Addendum</Name>
          <Description>DFS-R Replication Event ID 2104 with message contains Internal DB Error in Event Description Addendum</Description>
        </DisplayString>
        <DisplayString ElementID="DFS.Replication.2104.Event.InternalDB.ErrorEvent.Addendum.Monitor" SubElementID="DFS.Replication.2104.Event.InternalDB.ErrorEvent.Addendum.Monitor.Timer">
          <Name>Success state for Monitor DFS-R Replication event 2104 with 1078 Internal DB Error Event Addendum</Name>
        </DisplayString>
        <DisplayString ElementID="DFS.Replication.2104.Event.InternalDB.ErrorEvent.Addendum.Monitor" SubElementID="DFS.Replication.2104.Event.InternalDB.ErrorEvent.Addendum.Monitor.Repeated">
          <Name>Error state for Monitor DFS-R Replication event 2104 with 1078 Internal DB Error Event Addendum</Name>
        </DisplayString>
        <DisplayString ElementID="DFS.Replication.2104.Event.InternalDB.ErrorEvent.Addendum.Monitor.AlertMessage">
          <Name>DFS Replication 2104 Event ID with Message contains 'Internal database error' Alert Monitor</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFSR.ReplicationAndBacklog.Monitor">
          <Name>Proactive DFSR Replication And Backlog Monitor</Name>
          <Description>Monitor to check for DFSFolders replication and files backlog per share</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFSR.ReplicationAndBacklog.Monitor" SubElementID="GoodCondition">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFSR.ReplicationAndBacklog.Monitor" SubElementID="BadCondition">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFSR.ReplicationAndBacklog.Monitor.AlertMessage">
          <Name>Proactive DFSR Replication And Backlog Monitor</Name>
          <Description>{1}
		  
{2}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFSR.ReplicationAndBacklog.Watcher.Monitor">
          <Name>Proactive DFSR Replication And Backlog Monitor</Name>
          <Description>Monitor to check for DFSFolders replication and files backlog per share</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFSR.ReplicationAndBacklog.Watcher.Monitor" SubElementID="GoodCondition">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFSR.ReplicationAndBacklog.Watcher.Monitor" SubElementID="BadCondition">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFSR.ReplicationAndBacklog.Watcher.Monitor.AlertMessage">
          <Name>Proactive DFSR Replication And Backlog File Count Monitor</Name>
          <Description>{1}
		  
{2}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFSR.5002.Event.Partner.Communication.Failure.Monitor">
          <Name>Proactive DFSR 5002 Event for Replication Partner Communication Failure Monitor</Name>
          <Description>Monitor to check for DFS Event ID 5002 for partner communication failure</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFSR.5002.Event.Partner.Communication.Failure.Monitor" SubElementID="Proactive.DFSR.5002.Event.Partner.Communication.Failure.Monitor.Timer">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFSR.5002.Event.Partner.Communication.Failure.Monitor" SubElementID="Proactive.DFSR.5002.Event.Partner.Communication.Failure.Monitor.Repeated">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFSR.5002.Event.Partner.Communication.Failure.Monitor.AlertMessage">
          <Name>Proactive DFSR 5002 Event for Replication Partner Communication Failure Monitor</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFSR.5008.Event.Partner.NotReachable.Monitor">
          <Name>Proactive DFSR 5008 Event for Replication Partner NOT reachable Monitor</Name>
          <Description>Monitor to check for DFS replication partner NOT reachable</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFSR.5008.Event.Partner.NotReachable.Monitor" SubElementID="Proactive.DFSR.5008.Event.Partner.NotReachable.Monitor.Timer">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFSR.5008.Event.Partner.NotReachable.Monitor" SubElementID="Proactive.DFSR.5008.Event.Partner.NotReachable.Monitor.Repeated">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DFSR.5008.Event.Partner.NotReachable.Monitor.AlertMessage">
          <Name>Proactive DFSR 5008 Event for Replication Partner NOT reachable Monitor</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.FileServer.DFSR.10.0.Service.AvailabilityState.Monitor">
          <Name>Microsoft Windows FileServer DFSR 2016+ Service Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.FileServer.DFSR.10.0.Service.AvailabilityState.Monitor" SubElementID="Running">
          <Name>Running</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.FileServer.DFSR.10.0.Service.AvailabilityState.Monitor" SubElementID="NotRunning">
          <Name>Not Running</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.FileServer.DFSR.10.0.Service.AvailabilityState.Monitor.AlertMessage">
          <Name>Microsoft Windows FileServer DFSR 2016+ Service Is Not Running</Name>
          <Description>{0}</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.DFSN.10.0.Service.Recovery">
          <Name>Microsoft Windows FileServer 2016 DFSN Service Recovery</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.DFSR.10.0.Service.Recovery">
          <Name>Microsoft Windows FileServer 2016 DFSR Service Recovery</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.Microsoft.Windows.FileServer.SmSvc.10.0.Service.Recovery">
		  <Name>Microsoft Windows FileServer 2016 SmSvc Service Recovery</Name>
        </DisplayString>

        <DisplayString ElementID="Override.Severity.Microsoft.Windows.FileServices.Service.FCI.ADPropertySync">
          <Name>NotUsed</Name>
          <Description>5 Jan 2023 - KWJ - Alert severity changed to Warning</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Severity.Microsoft.Windows.FileServices.Service.Deduplication.10.0.CorruptionsFound">
          <Name>NotUsed</Name>
          <Description>21 Mar 2023 - KWJ - Override to Warning</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Severity.Microsoft.Windows.FileServices.Service.Deduplication.10.0.VolumeOptimizationRollup">
          <Name>NotUsed</Name>
          <Description>21 Mar 2023 - KWJ - Override to Warning</Description>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>